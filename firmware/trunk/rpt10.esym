D G "__PCH__" 0 2400 ""4.141""
D G "__DEVICE__" 0 2400 "6650"
D G "__DATE__" 0 2400 ""21-ат.б.-13""
D G "__TIME__" 0 2400 ""10:25:55"" "gogo40.c - Contains the core functions of the gogo board firmware"
d G "PIN_A0" 1 22 "31744"
d G "PIN_A1" 1 23 "31745"
d G "PIN_A2" 1 24 "31746"
d G "PIN_A3" 1 25 "31747"
d G "PIN_A4" 1 26 "31748"
d G "PIN_A5" 1 27 "31749"
d G "PIN_B0" 1 29 "31752"
d G "PIN_B1" 1 30 "31753"
d G "PIN_B2" 1 31 "31754"
d G "PIN_B3" 1 32 "31755"
d G "PIN_B4" 1 33 "31756"
d G "PIN_B5" 1 34 "31757"
d G "PIN_B6" 1 35 "31758"
d G "PIN_B7" 1 36 "31759"
d G "PIN_C0" 1 38 "31760"
d G "PIN_C1" 1 39 "31761"
d G "PIN_C2" 1 40 "31762"
d G "PIN_C3" 1 41 "31763"
d G "PIN_C4" 1 42 "31764"
d G "PIN_C5" 1 43 "31765"
d G "PIN_C6" 1 44 "31766"
d G "PIN_C7" 1 45 "31767"
d G "PIN_D0" 1 47 "31768"
d G "PIN_D1" 1 48 "31769"
d G "PIN_D2" 1 49 "31770"
d G "PIN_D3" 1 50 "31771"
d G "PIN_D4" 1 51 "31772"
d G "PIN_D5" 1 52 "31773"
d G "PIN_D6" 1 53 "31774"
d G "PIN_D7" 1 54 "31775"
d G "PIN_E0" 1 56 "31776"
d G "PIN_E1" 1 57 "31777"
d G "PIN_E2" 1 58 "31778"
d G "PIN_E3" 1 59 "31779"
d G "PIN_E4" 1 60 "31780"
d G "PIN_E5" 1 61 "31781"
d G "PIN_E6" 1 62 "31782"
d G "PIN_E7" 1 63 "31783"
d G "PIN_F2" 1 65 "31786"
d G "PIN_F3" 1 66 "31787"
d G "PIN_F4" 1 67 "31788"
d G "PIN_F5" 1 68 "31789"
d G "PIN_F6" 1 69 "31790"
d G "PIN_F7" 1 70 "31791"
d G "PIN_G0" 1 72 "31792"
d G "PIN_G1" 1 73 "31793"
d G "PIN_G2" 1 74 "31794"
d G "PIN_G3" 1 75 "31795"
d G "PIN_G4" 1 76 "31796"
d G "PIN_G5" 1 77 "31797"
d G "PIN_G6" 1 78 "31798"
d G "PIN_G7" 1 79 "31799"
d G "FALSE" 1 82 "0"
d G "TRUE" 1 83 "1"
d G "BYTE" 1 85 "int8"
d G "BOOLEAN" 1 86 "int1"
d G "getc" 1 88 "getch"
d G "fgetc" 1 89 "getch"
d G "getchar" 1 90 "getch"
d G "putc" 1 91 "putchar"
d G "fputc" 1 92 "putchar"
d G "fgets" 1 93 "gets"
d G "fputs" 1 94 "puts"
d G "WDT_TIMEOUT" 1 99 "7"
d G "MCLR_FROM_SLEEP" 1 100 "11"
d G "MCLR_FROM_RUN" 1 101 "15"
d G "NORMAL_POWER_UP" 1 102 "12"
d G "BROWNOUT_RESTART" 1 103 "14"
d G "WDT_FROM_SLEEP" 1 104 "3"
d G "RESET_INSTRUCTION" 1 105 "0"
d G "REG_LOW_POWER" 1 108 "2"
d G "REG_NORMAL" 1 109 "0" "default"
d G "SLEEP_FULL" 1 112 "0" "Default"
d G "SLEEP_IDLE" 1 113 "1" "Clock and peripherals don't stop"
d G "T0_INTERNAL" 1 120 "0"
d G "T0_EXT_L_TO_H" 1 121 "32"
d G "T0_EXT_H_TO_L" 1 122 "48"
d G "T0_DIV_1" 1 124 "8"
d G "T0_DIV_2" 1 125 "0"
d G "T0_DIV_4" 1 126 "1"
d G "T0_DIV_8" 1 127 "2"
d G "T0_DIV_16" 1 128 "3"
d G "T0_DIV_32" 1 129 "4"
d G "T0_DIV_64" 1 130 "5"
d G "T0_DIV_128" 1 131 "6"
d G "T0_DIV_256" 1 132 "7"
d G "T0_OFF" 1 134 "0x80"
d G "T0_8_BIT" 1 136 "0x40"
d G "RTCC_INTERNAL" 1 138 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 139 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 140 "48"
d G "RTCC_DIV_1" 1 141 "8"
d G "RTCC_DIV_2" 1 142 "0"
d G "RTCC_DIV_4" 1 143 "1"
d G "RTCC_DIV_8" 1 144 "2"
d G "RTCC_DIV_16" 1 145 "3"
d G "RTCC_DIV_32" 1 146 "4"
d G "RTCC_DIV_64" 1 147 "5"
d G "RTCC_DIV_128" 1 148 "6"
d G "RTCC_DIV_256" 1 149 "7"
d G "RTCC_OFF" 1 150 "0x80"
d G "RTCC_8_BIT" 1 151 "0x40"
d G "WDT_ON" 1 162 "0x100"
d G "WDT_OFF" 1 163 "0"
d G "T1_DISABLED" 1 169 "0"
d G "T1_INTERNAL" 1 170 "0x81"
d G "T1_EXTERNAL" 1 171 "0x87"
d G "T1_EXTERNAL_SYNC" 1 172 "0x83"
d G "T1_CLK_OUT" 1 174 "8"
d G "T1_DIV_BY_1" 1 176 "0"
d G "T1_DIV_BY_2" 1 177 "0x10"
d G "T1_DIV_BY_4" 1 178 "0x20"
d G "T1_DIV_BY_8" 1 179 "0x30"
d G "T2_DISABLED" 1 184 "0"
d G "T2_DIV_BY_1" 1 185 "4"
d G "T2_DIV_BY_4" 1 186 "5"
d G "T2_DIV_BY_16" 1 187 "6"
d G "T3_DISABLED" 1 193 "0"
d G "T3_INTERNAL" 1 194 "0x85"
d G "T3_EXTERNAL" 1 195 "0x87"
d G "T3_EXTERNAL_SYNC" 1 196 "0x83"
d G "T3_DIV_BY_1" 1 198 "0"
d G "T3_DIV_BY_2" 1 199 "0x10"
d G "T3_DIV_BY_4" 1 200 "0x20"
d G "T3_DIV_BY_8" 1 201 "0x30"
d G "T4_DISABLED" 1 206 "0"
d G "T4_DIV_BY_1" 1 207 "4"
d G "T4_DIV_BY_4" 1 208 "5"
d G "T4_DIV_BY_16" 1 209 "6"
d G "CCP_OFF" 1 215 "0"
d G "CCP_CAPTURE_FE" 1 216 "4"
d G "CCP_CAPTURE_RE" 1 217 "5"
d G "CCP_CAPTURE_DIV_4" 1 218 "6"
d G "CCP_CAPTURE_DIV_16" 1 219 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 220 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 221 "9"
d G "CCP_COMPARE_INT" 1 222 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 223 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 1 224 "0xB"
d G "CCP_PWM" 1 225 "0xC"
d G "CCP_PWM_PLUS_1" 1 226 "0x1c"
d G "CCP_PWM_PLUS_2" 1 227 "0x2c"
d G "CCP_PWM_PLUS_3" 1 228 "0x3c"
d G "T3_CCP1_TO_5" 1 234 "0x48"
d G "T3_CCP2_TO_5" 1 235 "0x8"
d G "T3_CCP3_TO_5" 1 236 "0x40"
d G "CCP_PWM_H_H" 1 239 "0x0c"
d G "CCP_PWM_H_L" 1 240 "0x0d"
d G "CCP_PWM_L_H" 1 241 "0x0e"
d G "CCP_PWM_L_L" 1 242 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 244 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 245 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 246 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 248 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 249 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 250 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 251 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 252 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 253 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 254 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 256 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 257 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 258 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 260 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 261 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 262 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 264 "0x80000000"
d G "PMP_DISABLED" 1 284 "0"
d G "PMP_ENABLED" 1 285 "0x02008000"
d G "PMP_COMBINE_RW" 1 286 "0x01000000"
d G "PSP_ADDRESS_MODE" 1 287 "0x01000000"
d G "PSP_NORMAL_MODE" 1 288 "0x18000000"
d G "PMP_16_BIT" 1 289 "0x04000000"
d G "PMP_INC_ADDR" 1 290 "0x08000000"
d G "PMP_DEC_ADDR" 1 291 "0x10000000"
d G "PMP_INT" 1 292 "0x20000000"
d G "PMP_STALL" 1 293 "0x40000000"
d G "PMP_INT_3" 1 294 "0x60000000"
d G "PMP_RD_ACT_HIGH" 1 296 "0x00000101"
d G "PMP_WR_ACT_HIGH" 1 297 "0x00000202"
d G "PMP_RD_ACT_LOW" 1 298 "0x00000100"
d G "PMP_WR_ACT_LOW" 1 299 "0x00000200"
d G "PMP_BE_ACT_HIGH" 1 300 "0x00000404"
d G "PMP_BE_ACT_LOW" 1 301 "0x00000400"
d G "PMP_CS1_ACT_HIGH" 1 302 "0x00000008"
d G "PMP_CS2_ACT_HIGH" 1 303 "0x00000010"
d G "PMP_AL_ACT_HIGH" 1 304 "0x00000020"
d G "PMP_ADDR_MUX_A_D" 1 305 "0x00000800"
d G "PMP_ADDR_MUX_D" 1 306 "0x00001000"
d G "PMP_IDLE_OFF" 1 307 "0x00002000"
d G "PMP_WAITE" 1 309 "0x00010000" "Data hold after strobe, add *2 for 3Tcy or *3 for 4Tcy"
d G "PMP_WAITM" 1 310 "0x00040000" "Data hold read to strobe, add *n for n*Tcy (n=1..15)"
d G "PMP_WAITB" 1 311 "0x00400000" "Data hold before R/W, add *2 for 3Tcy or *3 for 4Tcy"
d G "PP_ACTIVE_IDLE" 1 313 "0x00002000"
d G "SPI_DISABLED" 1 318 "0x00"
d G "SPI_MASTER" 1 319 "0x20"
d G "SPI_SLAVE" 1 320 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 321 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 322 "0x00"
d G "SPI_CLK_DIV_4" 1 323 "0x00"
d G "SPI_CLK_DIV_16" 1 324 "0x01"
d G "SPI_CLK_DIV_64" 1 325 "0x02"
d G "SPI_CLK_T2" 1 326 "0x03"
d G "SPI_SS_DISABLED" 1 327 "0x01"
d G "SPI_XMIT_L_TO_H" 1 329 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 330 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 332 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 333 "0x8000"
d G "SPI_L_TO_H" 1 336 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 337 "SPI_SCK_IDLE_HIGH"
d G "UART_ADDRESS" 1 343 "2"
d G "UART_DATA" 1 344 "4"
d G "UART_AUTODETECT" 1 345 "8"
d G "UART_AUTODETECT_NOWAIT" 1 346 "9"
d G "UART_WAKEUP_ON_RDA" 1 347 "10"
d G "UART_SEND_BREAK" 1 348 "13"
d G "NC_NC_NC_NC" 1 353 "0x00"
d G "NC_NC" 1 354 "0x00"
d G "CP1_VREF_F6" 1 357 "0x83"
d G "CP1_F5_F6" 1 358 "0x80"
d G "CP1_VREF_VREF" 1 359 "0x87"
d G "CP1_F5_VREF" 1 360 "0x84"
d G "CP1_OUT_ON_F2" 1 362 "0x40"
d G "CP1_INVERT" 1 363 "0x20"
d G "CP1_INT_H_TO_L" 1 364 "0x10"
d G "CP1_INT_L_TO_H" 1 365 "0x08"
d G "CP2_VREF_F4" 1 368 "0x8300"
d G "CP2_F3_F4" 1 369 "0x8000"
d G "CP2_VREF_VREF" 1 370 "0x8700"
d G "CP2_F3_VREF" 1 371 "0x8400"
d G "CP2_OUT_ON_F1" 1 373 "0x4000"
d G "CP2_INVERT" 1 374 "0x2000"
d G "CP2_INT_H_TO_L" 1 375 "0x1000"
d G "CP2_INT_L_TO_H" 1 376 "0x0800"
d G "VREF_LOW" 1 384 "0xA0"
d G "VREF_HIGH" 1 385 "0x80"
d G "VREF_EXT" 1 386 "0x10" "Range for ref gen VREF- to VREF+"
d G "VREF_OUT_F5" 1 387 "0x40"
d G "OSC_31250" 1 393 "0x8000"
d G "OSC_PLL_ON" 1 394 "0x4000"
d G "OSC_PLL_OFF" 1 395 "0"
d G "OSC_31KHZ" 1 396 "0"
d G "OSC_125KHZ" 1 397 "0x10"
d G "OSC_250KHZ" 1 398 "0x20"
d G "OSC_500KHZ" 1 399 "0x30"
d G "OSC_1MHZ" 1 400 "0x40"
d G "OSC_2MHZ" 1 401 "0x50"
d G "OSC_4MHZ" 1 402 "0x60"
d G "OSC_8MHZ" 1 403 "0x70"
d G "OSC_TIMER1" 1 405 "1"
d G "OSC_INTRC" 1 406 "3"
d G "OSC_NORMAL" 1 407 "0"
d G "OSC_IDLE_MODE" 1 409 "0x80"
d G "OSC_STATE_STABLE" 1 413 "4"
d G "OSC_STATE_EXT_RUNNING" 1 414 "8"
d G "ADC_OFF" 1 421 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 422 "0x100"
d G "ADC_CLOCK_DIV_4" 1 423 "0x04"
d G "ADC_CLOCK_DIV_8" 1 424 "0x01"
d G "ADC_CLOCK_DIV_16" 1 425 "0x05"
d G "ADC_CLOCK_DIV_32" 1 426 "0x02"
d G "ADC_CLOCK_DIV_64" 1 427 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 428 "0x03" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 1 430 "0x00"
d G "ADC_TAD_MUL_2" 1 431 "0x08"
d G "ADC_TAD_MUL_4" 1 432 "0x10"
d G "ADC_TAD_MUL_6" 1 433 "0x18"
d G "ADC_TAD_MUL_8" 1 434 "0x20"
d G "ADC_TAD_MUL_12" 1 435 "0x28"
d G "ADC_TAD_MUL_16" 1 436 "0x30"
d G "ADC_TAD_MUL_20" 1 437 "0x38"
d G "sAN11" 1 442 "0x8" "| F6"
d G "sAN10" 1 443 "0x4" "| F5"
d G "sAN7" 1 444 "0x800000" "| F2"
d G "sAN4" 1 445 "0x100000" "| A5"
d G "sAN3" 1 446 "0x80000" "| A3"
d G "sAN2" 1 447 "0x40000" "| A2"
d G "sAN1" 1 448 "0x20000" "| A1"
d G "sAN0" 1 449 "0x10000" "| A0"
d G "NO_ANALOGS" 1 450 "0x0" "None"
d G "ALL_ANALOG" 1 451 "0xdf00ff" "A0 A1 A2 A3 A5 F1 F2 F3 F4 F5 F6 H4 H5 H6 H7"
d G "VSS_VDD" 1 454 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 1 455 "0x4000" "| Range 0-Vref"
d G "VREF_VREF" 1 456 "0xc000" "| Range Vref-Vref"
d G "VREF_VDD" 1 457 "0x8000" "| Range Vref-Vdd"
d G "ADC_START_AND_READ" 1 460 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 461 "1"
d G "ADC_READ_ONLY" 1 462 "6"
d G "L_TO_H" 1 470 "0x40"
d G "H_TO_L" 1 471 "0"
d G "GLOBAL" 1 473 "0xF2C0"
d G "PERIPH" 1 474 "0xF240"
d G "INT_RTCC" 1 475 "0x00F220"
d G "INT_TIMER0" 1 476 "0x00F220"
d G "INT_TIMER1" 1 477 "0x009D01"
d G "INT_TIMER2" 1 478 "0x009D02"
d G "INT_TIMER3" 1 479 "0x00A002"
d G "INT_EXT_L2H" 1 480 "0x5000F210"
d G "INT_EXT_H2L" 1 481 "0x6000F210"
d G "INT_EXT" 1 482 "0x00F210"
d G "INT_EXT1_L2H" 1 483 "0x5001F008"
d G "INT_EXT1_H2L" 1 484 "0x6001F008"
d G "INT_EXT1" 1 485 "0x00F008"
d G "INT_EXT2_L2H" 1 486 "0x5002F010"
d G "INT_EXT2_H2L" 1 487 "0x6002F010"
d G "INT_EXT2" 1 488 "0x00F010"
d G "INT_EXT3_L2H" 1 489 "0x5003F020"
d G "INT_EXT3_H2L" 1 490 "0x6003F020"
d G "INT_EXT3" 1 491 "0x00F020"
d G "INT_RB" 1 492 "0x00FFF208"
d G "INT_AD" 1 493 "0x009D40"
d G "INT_RDA" 1 494 "0x009D20"
d G "INT_TBE" 1 495 "0x009D10"
d G "INT_SSP" 1 496 "0x009D08"
d G "INT_CCP1" 1 497 "0x009D04"
d G "INT_CCP2" 1 498 "0x00A001"
d G "INT_BUSCOL" 1 499 "0x00A008"
d G "INT_LOWVOLT" 1 500 "0x00A004"
d G "INT_COMP" 1 501 "0x00A040"
d G "INT_RDA2" 1 502 "0x00A320"
d G "INT_TBE2" 1 503 "0x00A310"
d G "INT_TIMER4" 1 504 "0x00A308"
d G "INT_CCP3" 1 505 "0x00A301"
d G "INT_CCP4" 1 506 "0x00A302"
d G "INT_CCP5" 1 507 "0x00A304"
d G "INT_OSCF" 1 508 "0x00A080"
d G "INT_BUSCOL2" 1 509 "0x00A340"
d G "INT_SSP2" 1 510 "0x00A380"
d G "INT_COMP2" 1 511 "0x00A020"
d G "INT_PMP" 1 512 "0x009D80"
d G "INT_USB" 1 513 "0x00A010"
C L "get_float_usb" 0 35 1 "FUNCTION"
C L "get_float_usb" 2 2 192 "FUNCTION"
F G "get_float_usb" 2 204 "float()"
F G "get_long_usb" 2 205 "sint16()"
F G "get_int_usb" 2 206 "sint8()"
V L "s" 2 207 "*int8"
V L "max" 2 207 "int8"
F G "get_string_usb" 2 207 "void(*int8 s,int8 max)"
F G "gethex_usb" 2 208 "int8()"
F G "gethex1_usb" 2 209 "int8()"
D G "usb_cdc_kbhit" 2 214 "() (usb_cdc_get_buffer_status.got)"
D G "usb_cdc_putempty" 2 215 "() ((usb_cdc_put_buffer_nextin==0) && usb_cdc_put_buffer_free())"
D G "usb_cdc_putready" 2 216 "() (usb_cdc_put_buffer_nextin<sizeof(usb_cdc_put_buffer))"
D G "usb_cdc_connected" 2 217 "() (usb_cdc_got_set_line_coding)"
V L "c" 2 218 "int8"
F G "usb_cdc_putc_fast" 2 218 "void(int8 c)"
F G "usb_cdc_getc" 2 219 "int8()"
V L "c" 2 220 "int8"
F G "usb_cdc_putc" 2 220 "void(int8 c)"
F G "usb_cdc_get_discard" 2 221 "void()" "functions automatically called by USB handler code"
F G "usb_isr_tkn_cdc" 2 224 "void()"
F G "usb_cdc_init" 2 225 "void()"
F G "usb_isr_tok_out_cdc_control_dne" 2 226 "void()"
F G "usb_isr_tok_in_cdc_data_dne" 2 227 "void()"
F G "usb_isr_tok_out_cdc_data_dne" 2 228 "void()"
F G "usb_cdc_flush_out_buffer" 2 230 "void()" "Include the CCS USB Libraries.  See the comments at the top of these"
D G "__USB_PIC_PERIF__" 2 239 "1"
D G "__PIC18_USB_H__" 3 132 ""
D G "__USB_HARDWARE__" 3 134 ""
D G "__PIC__" 3 137 "1"
D G "USB_USE_FULL_SPEED" 3 140 "TRUE"
D G "USB_MAX_EP0_PACKET_LENGTH" 3 153 "64"
D G "__USB_HW_LAYER_H__" 4 34 ""
E G "USB_DTS_DATA1" 4 36 "1"
E G "USB_DTS_TOGGLE" 4 36 "2"
E G "USB_DTS_DATA0" 4 37 "0"
E G "USB_DTS_STALL" 4 37 "3"
E G "USB_DTS_USERX" 4 37 "4" "USER LEVEL FUNCTIONS:"
C L "usb_cdc_flush_out_buffer" 4 2 5 "FUNCTION"
F G "usb_init" 4 48 "void()" "/* usb_init_cs()"
C L "usb_init" 4 2 4 "FUNCTION"
F G "usb_init_cs" 4 56 "void()" "/* usb_task()"
C L "usb_init_cs" 4 2 4 "FUNCTION"
F G "usb_task" 4 64 "void()" "/* usb_attach()"
C L "usb_task" 4 2 11 "FUNCTION"
F G "usb_attach" 4 79 "void()" "/* usb_detach()"
C L "usb_attach" 4 2 14 "FUNCTION"
F G "usb_detach" 4 97 "void()" "/* usb_put_packet()"
C L "usb_detach" 4 2 27 "FUNCTION"
V L "endpoint" 4 128 "int8"
V L "ptr" 4 128 "*int8"
V L "len" 4 128 "int16"
V L "tgl" 4 128 "USB_DTS_BIT"
F G "usb_put_packet" 4 128 "int8(int8 endpoint,*int8 ptr,int16 len,USB_DTS_BIT tgl)" "/* usb_get_packet(endpoint, *ptr, max)"
C L "usb_put_packet" 4 2 22 "FUNCTION"
V L "endpoint" 4 154 "int8"
V L "ptr" 4 154 "*int8"
V L "max" 4 154 "int16"
F G "usb_get_packet" 4 154 "int16(int8 endpoint,*int8 ptr,int16 max)" "/* usb_kbhit(endpoint)"
C L "usb_get_packet" 4 2 12 "FUNCTION"
V L "en" 4 170 "int8"
F G "usb_kbhit" 4 170 "int8(int8 en)" "/* usb_tbe(endpoint)"
C L "usb_kbhit" 4 2 13 "FUNCTION"
V L "en" 4 187 "int8"
F G "usb_tbe" 4 187 "int8(int8 en)" "END USER LEVEL FUNCTIONS /////////////////////////////////////"
C L "usb_tbe" 4 2 16 "FUNCTION"
V L "endpoint" 4 212 "int8"
F G "usb_stall_ep" 4 212 "void(int8 endpoint)" "/* usb_unstall_ep(endpoint, direction)"
C L "usb_stall_ep" 4 2 10 "FUNCTION"
V L "endpoint" 4 227 "int8"
F G "usb_unstall_ep" 4 227 "void(int8 endpoint)" "/* usb_endpoint_stalled()"
C L "usb_unstall_ep" 4 2 15 "FUNCTION"
V L "endpoint" 4 246 "int8"
F G "usb_endpoint_stalled" 4 246 "int8(int8 endpoint)" "/* usb_set_address(address)"
C L "usb_endpoint_stalled" 4 2 7 "FUNCTION"
V L "address" 4 257 "int8"
F G "usb_set_address" 4 257 "void(int8 address)" "/* usb_set_configured()"
C L "usb_set_address" 4 2 10 "FUNCTION"
V L "config" 4 271 "int8"
F G "usb_set_configured" 4 271 "void(int8 config)" "/* usb_disable_endpoints()"
C L "usb_set_configured" 4 2 4 "FUNCTION"
F G "usb_disable_endpoints" 4 279 "void()" "/* usb_disable_endpoint()"
C L "usb_disable_endpoints" 4 2 6 "FUNCTION"
V L "en" 4 290 "int8"
F G "usb_disable_endpoint" 4 290 "void(int8 en)" "/* usb_request_send_response(len)"
C L "usb_disable_endpoint" 4 2 28 "FUNCTION"
V L "len" 4 322 "int8"
F G "usb_request_send_response" 4 322 "void(int8 len)"
F G "usb_request_get_data" 4 323 "void()"
F G "usb_request_stall" 4 324 "void()" "EXTRA USER FUNCTIONS /////////////////////////////////"
C L "usb_request_stall" 3 174 15 "FUNCTION"
V L "endpoint" 3 190 "int8"
V L "len" 3 190 "int16"
V L "tgl" 3 190 "USB_DTS_BIT"
F G "usb_flush_in" 3 190 "int8(int8 endpoint,int16 len,USB_DTS_BIT tgl)" "/* usb_flush_out()"
C L "usb_flush_in" 3 174 13 "FUNCTION"
V L "endpoint" 3 207 "int8"
V L "tgl" 3 207 "USB_DTS_BIT"
F G "usb_flush_out" 3 207 "void(int8 endpoint,USB_DTS_BIT tgl)" "/* usb_rx_packet_size()"
C L "usb_flush_out" 3 174 10 "FUNCTION"
V L "endpoint" 3 221 "int8"
F G "usb_rx_packet_size" 3 221 "int16(int8 endpoint)" "usb_desc_cdc.h                            ////"
D G "__USB_DESCRIPTORS__" 5 42 ""
D G "USB_CONFIG_PID" 5 46 "0x0033"
D G "USB_CONFIG_VID" 5 49 "0x0461"
D G "USB_CONFIG_BUS_POWER" 5 52 "100" "100mA  (range is 0..500)"
D G "USB_CONFIG_VERSION" 5 55 "0x0100" "01.00  //range is 00.00 to 99.99"
D G "USB_HID_DEVICE" 5 59 "FALSE"
D G "USB_CDC_DEVICE" 5 60 "TRUE"
D G "USB_CDC_COMM_IN_ENDPOINT" 5 62 "1"
D G "USB_CDC_COMM_IN_SIZE" 5 64 "11"
D G "USB_EP1_TX_ENABLE" 5 66 "USB_ENABLE_INTERRUPT"
D G "USB_EP1_TX_SIZE" 5 67 "USB_CDC_COMM_IN_SIZE"
D G "USB_CDC_DATA_IN_ENDPOINT" 5 70 "2"
D G "USB_CDC_DATA_IN_SIZE" 5 72 "64"
D G "USB_EP2_TX_ENABLE" 5 74 "USB_ENABLE_BULK"
D G "USB_EP2_TX_SIZE" 5 75 "USB_CDC_DATA_IN_SIZE"
D G "USB_CDC_DATA_OUT_ENDPOINT" 5 78 "2"
D G "USB_CDC_DATA_OUT_SIZE" 5 80 "64"
D G "USB_EP2_RX_ENABLE" 5 82 "USB_ENABLE_BULK"
D G "USB_EP2_RX_SIZE" 5 83 "USB_CDC_DATA_OUT_SIZE"
D G "__USB_PROTOTYPES__" 6 297 ""
D G "USB_HID_BOOT_PROTOCOL" 6 307 "FALSE"
D G "USB_HID_IDLE" 6 311 "FALSE"
D G "USB_OPT_FOR_ROM" 6 325 "TRUE"
C L "usb_rx_packet_size" 6 2 9 "FUNCTION"
F G "usb_enumerated" 6 344 "int8()" "/* usb_wait_for_enumeration()"
C L "usb_enumerated" 6 2 6 "FUNCTION"
F G "usb_wait_for_enumeration" 6 354 "void()" "/* usb_gets(endpoint, ptr, max, timeout)"
C L "usb_wait_for_enumeration" 6 2 14 "FUNCTION"
V L "endpoint" 6 372 "int8"
V L "ptr" 6 372 "*int8"
V L "max" 6 372 "int16"
V L "timeout" 6 372 "int16"
F G "usb_gets" 6 372 "int16(int8 endpoint,*int8 ptr,int16 max,int16 timeout)" "/* usb_puts()"
C L "usb_gets" 6 2 16 "FUNCTION"
V L "endpoint" 6 392 "int8"
V L "ptr" 6 392 "*int8"
V L "len" 6 392 "int16"
V L "timeout" 6 392 "int8"
F G "usb_puts" 6 392 "int8(int8 endpoint,*int8 ptr,int16 len,int8 timeout)" "/* usb_attached()"
D G "usb_attached" 6 404 "() TRUE"
C L "usb_puts" 6 2 10 "FUNCTION"
V L "endpoint" 6 418 "int8"
F G "usb_endpoint_is_valid" 6 418 "int8(int8 endpoint)" "END USER-LEVEL API /////////////////////////////////////////////////////"
C L "usb_endpoint_is_valid" 6 2 1 "FUNCTION"
E G "GET_DESCRIPTOR" 6 426 "1"
E G "SET_ADDRESS" 6 426 "2"
E G "NONE" 6 426 "0"
E G "USB_GETDESC_CONFIG_TYPE" 6 428 "0"
E G "USB_GETDESC_HIDREPORT_TYPE" 6 428 "1"
E G "USB_GETDESC_STRING_TYPE" 6 428 "2"
E G "USB_GETDESC_DEVICE_TYPE" 6 428 "3"
C L "usb_endpoint_is_valid" 6 2 1 "FUNCTION"
C L "usb_endpoint_is_valid" 6 2 1 "FUNCTION"
C L "usb_endpoint_is_valid" 6 2 1 "FUNCTION"
C L "usb_endpoint_is_valid" 6 2 1 "FUNCTION"
T G "TYPE_USB_STACK_STATUS" 6 436 "{USB_STATES dev_req,int8 curr_config,int8 status_device,USB_GETDESC_TYPES getdesc_type}"
V G "USB_stack_status" 6 446 "TYPE_USB_STACK_STATUS" "/* usb_token_reset()"
C L "usb_endpoint_is_valid" 6 2 5 "FUNCTION"
F G "usb_token_reset" 6 455 "void()" "/* usb_isr_tok_setup_dne()"
C L "usb_token_reset" 6 2 31 "FUNCTION"
F G "usb_isr_tok_setup_dne" 6 490 "void()" "/* usb_isr_tok_out_dne()"
C L "usb_isr_tok_setup_dne" 6 2 10 "FUNCTION"
V L "endpoint" 6 504 "int8"
F G "usb_isr_tok_out_dne" 6 504 "void(int8 endpoint)" "/* usb_isr_tok_in_dne(endpoint)"
C L "usb_isr_tok_out_dne" 6 2 10 "FUNCTION"
V L "endpoint" 6 518 "int8"
F G "usb_isr_tok_in_dne" 6 518 "void(int8 endpoint)" "END STACK-LEVEL API USED BY HW DRIVERS /////////////////////////////////"
D G "USB_NUM_CONFIGURATIONS" 6 524 "1" "DO NOT CHANGE"
D G "PID_IN" 6 527 "0x09" "device to host transactions"
D G "PID_OUT" 6 528 "0x01" "host to device transactions"
D G "PID_SETUP" 6 529 "0x0D" "host to device setup transaction"
D G "PID_ACK" 6 530 "0x02" "receiver accepts error-free data packet"
D G "PID_DATA0" 6 531 "0x03" "data packet with even sync bit"
D G "PID_SOF" 6 532 "0x05" "start of framer marker and frame number"
D G "PID_NAK" 6 533 "0x0A" "receiver can't accept data or sender cant send data or has no data to transmit"
D G "PID_DATA1" 6 534 "0x0B" "data packet with odd sync bit"
D G "PID_PRE" 6 535 "0x0C" "preamble issued by host.  enables downstream traffic to low-speed device"
D G "PID_STALL" 6 536 "0x0E" "a control request isnt supported or the endpoint is halted"
D G "USB_DESC_DEVICE_TYPE" 6 539 "0x01" "#DEFINE USB_DEVICE_DESC_KEY      0x01"
D G "USB_DESC_CONFIG_TYPE" 6 540 "0x02" "#DEFINE USB_CONFIG_DESC_KEY      0x02"
D G "USB_DESC_STRING_TYPE" 6 541 "0x03" "#DEFINE USB_STRING_DESC_KEY      0x03"
D G "USB_DESC_INTERFACE_TYPE" 6 542 "0x04" "#DEFINE USB_INTERFACE_DESC_KEY   0x04"
D G "USB_DESC_ENDPOINT_TYPE" 6 543 "0x05" "#DEFINE USB_ENDPOINT_DESC_KEY    0x05"
D G "USB_DESC_CLASS_TYPE" 6 544 "0x21" "#DEFINE USB_CLASS_DESC_KEY       0x21"
D G "USB_DESC_HIDREPORT_TYPE" 6 545 "0x22"
D G "USB_DESC_IAD_TYPE" 6 546 "0x0b"
D G "USB_DESC_DEVICE_LEN" 6 549 "18" "#DEFINE USB_DEVICE_DESC_LEN      18"
D G "USB_DESC_CONFIG_LEN" 6 550 "9" "#DEFINE USB_CONFIG_DESC_LEN      9"
D G "USB_DESC_INTERFACE_LEN" 6 551 "9" "#DEFINE USB_INTERFACE_DESC_LEN   9"
D G "USB_DESC_CLASS_LEN" 6 552 "9" "#DEFINE USB_CLASS_DESC_LEN       9"
D G "USB_DESC_ENDPOINT_LEN" 6 553 "7" "#DEFINE USB_ENDPOINT_DESC_LEN    7"
D G "USB_DESC_IAD_LEN" 6 554 "8"
D G "USB_STANDARD_REQUEST_GET_STATUS" 6 557 "0x00"
D G "USB_STANDARD_REQUEST_CLEAR_FEATURE" 6 558 "0x01"
D G "USB_STANDARD_REQUEST_SET_FEATURE" 6 559 "0x03"
D G "USB_STANDARD_REQUEST_SET_ADDRESS" 6 560 "0x05"
D G "USB_STANDARD_REQUEST_GET_DESCRIPTOR" 6 561 "0x06"
D G "USB_STANDARD_REQUEST_SET_DESCRIPTOR" 6 562 "0x07"
D G "USB_STANDARD_REQUEST_GET_CONFIGURATION" 6 563 "0x08"
D G "USB_STANDARD_REQUEST_SET_CONFIGURATION" 6 564 "0x09"
D G "USB_STANDARD_REQUEST_GET_INTERFACE" 6 565 "0x0A"
D G "USB_STANDARD_REQUEST_SET_INTERFACE" 6 566 "0x0B"
D G "USB_STANDARD_REQUEST_SYNCH_FRAME" 6 567 "0x0C"
D G "USB_HID_REQUEST_GET_REPORT" 6 570 "0x01"
D G "USB_HID_REQUEST_GET_IDLE" 6 571 "0x02"
D G "USB_HID_REQUEST_GET_PROTOCOL" 6 572 "0x03"
D G "USB_HID_REQUEST_SET_REPORT" 6 573 "0x09"
D G "USB_HID_REQUEST_SET_IDLE" 6 574 "0x0A"
D G "USB_HID_REQUEST_SET_PROTOCOL" 6 575 "0x0B"
D G "USB_ENDPOINT_TYPE_CONTROL" 6 578 "0x00"
D G "USB_ENDPOINT_TYPE_ISOCHRONOUS" 6 579 "0x01"
D G "USB_ENDPOINT_TYPE_BULK" 6 580 "0x02"
D G "USB_ENDPOINT_TYPE_INTERRUPT" 6 581 "0x03"
D G "USB_ENABLE_DISABLED" 6 584 "-1"
D G "USB_ENABLE_BULK" 6 585 "USB_ENDPOINT_TYPE_BULK"
D G "USB_ENABLE_ISOCHRONOUS" 6 586 "USB_ENDPOINT_TYPE_ISOCHRONOUS"
D G "USB_ENABLE_INTERRUPT" 6 587 "USB_ENDPOINT_TYPE_INTERRUPT"
D G "USB_ENABLE_CONTROL" 6 588 "USB_ENDPOINT_TYPE_CONTROL"
D G "USB_EP0_TX_ENABLE" 6 594 "USB_ENABLE_CONTROL"
D G "USB_EP0_RX_ENABLE" 6 595 "USB_ENABLE_CONTROL"
D G "USB_EP0_RX_SIZE" 6 596 "USB_MAX_EP0_PACKET_LENGTH" "endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8"
D G "USB_EP0_TX_SIZE" 6 597 "USB_MAX_EP0_PACKET_LENGTH" "endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8"
D G "USB_EP1_RX_ENABLE" 6 604 "USB_ENABLE_DISABLED"
D G "USB_EP1_RX_SIZE" 6 611 "0"
D G "USB_EP3_TX_ENABLE" 6 663 "USB_ENABLE_DISABLED"
D G "USB_EP3_RX_ENABLE" 6 666 "USB_ENABLE_DISABLED"
D G "USB_EP3_RX_SIZE" 6 673 "0"
D G "USB_EP3_TX_SIZE" 6 684 "0"
D G "USB_EP4_TX_ENABLE" 6 694 "USB_ENABLE_DISABLED"
D G "USB_EP4_RX_ENABLE" 6 697 "USB_ENABLE_DISABLED"
D G "USB_EP4_RX_SIZE" 6 704 "0"
D G "USB_EP4_TX_SIZE" 6 715 "0"
D G "USB_EP5_TX_ENABLE" 6 725 "USB_ENABLE_DISABLED"
D G "USB_EP5_RX_ENABLE" 6 728 "USB_ENABLE_DISABLED"
D G "USB_EP5_RX_SIZE" 6 735 "0"
D G "USB_EP5_TX_SIZE" 6 746 "0"
D G "USB_EP6_TX_ENABLE" 6 756 "USB_ENABLE_DISABLED"
D G "USB_EP6_RX_ENABLE" 6 759 "USB_ENABLE_DISABLED"
D G "USB_EP6_RX_SIZE" 6 766 "0"
D G "USB_EP6_TX_SIZE" 6 777 "0"
D G "USB_EP7_TX_ENABLE" 6 787 "USB_ENABLE_DISABLED"
D G "USB_EP7_RX_ENABLE" 6 790 "USB_ENABLE_DISABLED"
D G "USB_EP7_RX_SIZE" 6 797 "0"
D G "USB_EP7_TX_SIZE" 6 808 "0"
D G "USB_EP8_TX_ENABLE" 6 818 "USB_ENABLE_DISABLED"
D G "USB_EP8_RX_ENABLE" 6 821 "USB_ENABLE_DISABLED"
D G "USB_EP8_RX_SIZE" 6 828 "0"
D G "USB_EP8_TX_SIZE" 6 839 "0"
D G "USB_EP9_TX_ENABLE" 6 849 "USB_ENABLE_DISABLED"
D G "USB_EP9_RX_ENABLE" 6 852 "USB_ENABLE_DISABLED"
D G "USB_EP9_RX_SIZE" 6 859 "0"
D G "USB_EP9_TX_SIZE" 6 870 "0"
D G "USB_EP10_TX_ENABLE" 6 880 "USB_ENABLE_DISABLED"
D G "USB_EP10_RX_ENABLE" 6 883 "USB_ENABLE_DISABLED"
D G "USB_EP10_RX_SIZE" 6 890 "0"
D G "USB_EP10_TX_SIZE" 6 901 "0"
D G "USB_EP11_TX_ENABLE" 6 911 "USB_ENABLE_DISABLED"
D G "USB_EP11_RX_ENABLE" 6 914 "USB_ENABLE_DISABLED"
D G "USB_EP11_RX_SIZE" 6 921 "0"
D G "USB_EP11_TX_SIZE" 6 932 "0"
D G "USB_EP12_TX_ENABLE" 6 942 "USB_ENABLE_DISABLED"
D G "USB_EP12_RX_ENABLE" 6 945 "USB_ENABLE_DISABLED"
D G "USB_EP12_RX_SIZE" 6 952 "0"
D G "USB_EP12_TX_SIZE" 6 963 "0"
D G "USB_EP13_TX_ENABLE" 6 973 "USB_ENABLE_DISABLED"
D G "USB_EP13_RX_ENABLE" 6 976 "USB_ENABLE_DISABLED"
D G "USB_EP13_RX_SIZE" 6 983 "0"
D G "USB_EP13_TX_SIZE" 6 994 "0"
D G "USB_EP14_TX_ENABLE" 6 1004 "USB_ENABLE_DISABLED"
D G "USB_EP14_RX_ENABLE" 6 1007 "USB_ENABLE_DISABLED"
D G "USB_EP14_RX_SIZE" 6 1014 "0"
D G "USB_EP14_TX_SIZE" 6 1025 "0"
D G "USB_EP15_TX_ENABLE" 6 1035 "USB_ENABLE_DISABLED"
D G "USB_EP15_RX_ENABLE" 6 1038 "USB_ENABLE_DISABLED"
D G "USB_EP15_RX_SIZE" 6 1045 "0"
D G "USB_EP15_TX_SIZE" 6 1056 "0"
V G "usb_ep_tx_type" 6 1063 "[16]"
V G "usb_ep_rx_type" 6 1072 "[16]"
V G "usb_ep_tx_size" 6 1081 "[16]"
V G "usb_ep_rx_size" 6 1090 "[16]"
D G "USB_TOTAL_CONFIG_LEN" 5 95 "67" "config+interface+class+endpoint+endpoint (2 endpoints)"
V G "USB_CONFIG_DESC" 5 97 "[1]" "IN ORDER TO COMPLY WITH WINDOWS HOSTS, THE ORDER OF THIS ARRAY MUST BE:"
C L "usb_isr_tok_in_dne" 5 89 5 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 89 1 "FUNCTION"
D G "USB_MAX_NUM_INTERFACES" 5 198 "2"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
V G "USB_NUM_INTERFACES" 5 201 "[1]"
C L "usb_isr_tok_in_dne" 5 192 5 "FUNCTION"
V G "USB_CLASS_DESCRIPTORS" 5 208 "[1][2][4]" "config 1"
C L "usb_isr_tok_in_dne" 5 192 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
V G "USB_DEVICE_DESC" 5 230 "[18]" "starts of with device configuration. only one possible"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 5 "FUNCTION"
V G "USB_STRING_DESC_OFFSET" 5 261 "int8[1]"
C L "usb_isr_tok_in_dne" 5 192 5 "FUNCTION"
V G "USB_STRING_DESC" 5 268 "[1]" "string 0"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 192 1 "FUNCTION"
D G "__USB_DRIVER__" 7 158 ""
D G "debug_usb" 7 177 "(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z)"
D G "debug_putc" 7 178 "(c)"
D G "debug_display_ram" 7 179 "(x,y)"
C L "usb_isr_tok_in_dne" 6 2 290 "FUNCTION"
D G "__PIC18_USB_C__" 8 111 ""
C L "usb_isr_tok_in_dne" 6 2 290 "FUNCTION"
D G "USB_IGNORE_RX_DTS" 8 119 "FALSE"
D G "USB_IGNORE_TX_DTS" 8 123 "FALSE"
D G "__USB_87J50__" 8 130 ""
D G "USB_TOTAL_RAM_SPACE" 8 131 " ((unsigned int16)getenv("RAM")-0x400)"
D G "USB_RAM_START" 8 132 "0x400"
D G "USB_NUM_UEP" 8 133 "16"
D G "USB_LAST_ALLOWED_ENDPOINT" 8 134 "16"
D G "USB_BDT_START" 8 181 "USB_RAM_START"
D G "USB_LAST_DEFINED_ENDPOINT" 8 211 "2"
D G "USB_CONTROL_REGISTER_SIZE" 8 218 " ((USB_LAST_DEFINED_ENDPOINT+1)*8)"
D G "USB_DATA_BUFFER_NEEDED" 8 220 " (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE)"
D G "USB_DATA_BUFFER_LOCATION" 8 247 " ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE)"
T G "STRUCT_BD" 8 257 "{int8 stat,int8 cnt,int16 addr}"
C L "usb_isr_tok_in_dne" 8 115 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 8 115 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 8 115 1 "FUNCTION"
V G "g_USBRAM" 8 290 "{}"
D G "g_USBBDT" 8 292 "g_USBRAM.bd"
D G "usb_ep0_rx_buffer" 8 328 "g_USBRAM.buffer.ep0_rx_buffer"
D G "usb_ep0_tx_buffer" 8 329 "g_USBRAM.buffer.ep0_tx_buffer"
D G "usb_ep1_rx_buffer" 8 332 "g_USBRAM.buffer.ep1_rx_buffer"
D G "usb_ep1_tx_buffer" 8 333 "g_USBRAM.buffer.ep1_tx_buffer"
D G "usb_ep2_rx_buffer" 8 334 "g_USBRAM.buffer.ep2_rx_buffer"
D G "usb_ep2_tx_buffer" 8 335 "g_USBRAM.buffer.ep2_tx_buffer"
D G "USB_USE_ERROR_COUNTER" 8 340 "FALSE"
D G "USB_PING_PONG_MODE_OFF" 8 343 "0" "no ping pong"
D G "USB_PING_PONG_MODE_E0" 8 344 "1" "ping pong endpoint 0 only"
D G "USB_PING_PONG_MODE_ON" 8 345 "2" "ping pong all endpoints"
D G "USB_PING_PONG_MODE" 8 349 "USB_PING_PONG_MODE_OFF"
D G "UEP0_LOC" 8 416 "0xF4C"
V G "USTATCopy" 8 419 "int8"
V G "g_UEP" 8 421 "int8[16]"
D G "UEP" 8 423 "(x) g_UEP[x]"
D G "BIT_SOF" 8 425 "6"
D G "BIT_STALL" 8 426 "5"
D G "BIT_IDLE" 8 427 "4"
D G "BIT_TRN" 8 428 "3"
D G "BIT_ACTV" 8 429 "2"
D G "BIT_UERR" 8 430 "1"
D G "BIT_URST" 8 431 "0"
D G "EP_BDxST_O" 8 457 "(x)    g_USBBDT[x].out.stat"
D G "EP_BDxCNT_O" 8 458 "(x)   g_USBBDT[x].out.cnt"
D G "EP_BDxADR_O" 8 459 "(x)   g_USBBDT[x].out.addr"
D G "EP_BDxST_I" 8 460 "(x)    g_USBBDT[x].in.stat"
D G "EP_BDxCNT_I" 8 461 "(x)   g_USBBDT[x].in.cnt"
D G "EP_BDxADR_I" 8 462 "(x)   g_USBBDT[x].in.addr"
D G "ENDPT_DISABLED" 8 468 "0x00" "endpoint not used"
D G "ENDPT_IN_ONLY" 8 469 "0x02" "endpoint supports IN transactions only"
D G "ENDPT_OUT_ONLY" 8 470 "0x04" "endpoint supports OUT transactions only"
D G "ENDPT_CONTROL" 8 471 "0x06" "Supports IN, OUT and CONTROL transactions - Only use with EP0"
D G "ENDPT_NON_CONTROL" 8 472 "0x0E" "Supports both IN and OUT transactions"
C L "usb_isr_tok_in_dne" 8 115 1 "FUNCTION"
E G "USB_STATE_DETACHED" 8 475 "0"
E G "USB_STATE_ATTACHED" 8 475 "1"
E G "USB_STATE_POWERED" 8 475 "2"
E G "USB_STATE_DEFAULT" 8 476 "3"
E G "USB_STATE_ADDRESS" 8 476 "4"
E G "USB_STATE_CONFIGURED" 8 476 "5"
V G "usb_state" 8 476 "" "--BDendST has their PIDs upshifed 2"
D G "USB_PIC_PID_IN" 8 479 "0x24" "device to host transactions"
D G "USB_PIC_PID_OUT" 8 480 "0x04" "host to device transactions"
D G "USB_PIC_PID_SETUP" 8 481 "0x34" "host to device setup transaction"
D G "USTAT_IN_E0" 8 483 "4"
D G "USTAT_OUT_SETUP_E0" 8 484 "0"
D G "__USB_UIF_RESET" 8 486 "0x01"
D G "__USB_UIF_ERROR" 8 487 "0x02"
D G "__USB_UIF_ACTIVE" 8 488 "0x04"
D G "__USB_UIF_TOKEN" 8 489 "0x08"
D G "__USB_UIF_IDLE" 8 490 "0x10"
D G "__USB_UIF_STALL" 8 491 "0x20"
D G "__USB_UIF_SOF" 8 492 "0x40"
D G "STANDARD_INTS" 8 497 "__USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET"
D G "__USB_UCFG_UTEYE" 8 500 "0x80"
D G "__USB_UCFG_UPUEN" 8 504 "0x10"
D G "__USB_UCFG_UTRDIS" 8 506 "0x08"
D G "__USB_UCFG_FSEN" 8 508 "0x04"
D G "__USB_UCFG_MY_UPUEN" 8 519 "__USB_UCFG_UPUEN"
D G "__UCFG_VAL_ENABLED__" 8 523 " (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE)"
D G "__UCFG_VAL_DISABLED__" 8 529 "__USB_UCFG_UTRDIS"
V G "__setup_0_tx_size" 8 535 "int8" "interrupt handler, specific to PIC18Fxx5x peripheral only"
F G "usb_handle_interrupt" 8 538 "void()"
F G "usb_isr_rst" 8 539 "void()"
F G "usb_isr_uerr" 8 540 "void()"
F G "usb_isr_sof" 8 541 "void()"
F G "usb_isr_activity" 8 542 "void()"
F G "usb_isr_uidle" 8 543 "void()"
F G "usb_isr_tok_dne" 8 544 "void()"
F G "usb_isr_stall" 8 545 "void()"
F G "usb_init_ep0_setup" 8 546 "void()"
C L "usb_init_ep0_setup" 8 115 2 "FUNCTION"
V L "en" 8 555 "int8"
F G "usb_kbhit" 8 555 "int8(int8 en,int16 )"
C L "usb_tbe" 8 115 1 "FUNCTION"
V L "en" 8 561 "int8"
F G "usb_tbe" 8 561 "int8(int8 en)"
C L "usb_detach" 8 115 1 "FUNCTION"
F G "usb_detach" 8 567 "void(int8 en)"
C L "usb_detach" 8 115 1 "FUNCTION"
C L "usb_detach" 8 115 1 "FUNCTION"
C L "usb_detach" 8 115 1 "FUNCTION"
C L "usb_detach" 8 115 2 "FUNCTION"
C L "usb_attach" 8 115 1 "FUNCTION"
F G "usb_attach" 8 589 "void(int8 en)"
C L "usb_attach" 8 115 1 "FUNCTION"
C L "usb_attach" 8 115 1 "FUNCTION"
C L "usb_attach" 8 115 1 "FUNCTION"
C L "usb_init_cs" 8 115 1 "FUNCTION"
F G "usb_init_cs" 8 600 "void(int8 en)"
C L "usb_task" 8 115 1 "FUNCTION"
F G "usb_task" 8 606 "void(int8 en)"
C L "usb_task" 8 115 1 "FUNCTION"
C L "usb_init" 8 115 1 "FUNCTION"
F G "usb_init" 8 647 "void(int8 en)"
C L "usb_flush_in" 8 115 1 "FUNCTION"
V L "endpoint" 8 659 "int8"
V L "len" 8 659 "int16"
V L "tgl" 8 659 "USB_DTS_BIT"
F G "usb_flush_in" 8 659 "int8(int8 endpoint,int16 len,USB_DTS_BIT tgl)"
V L "i" 8 661 "int8"
C L "usb_flush_in" 8 115 1 "FUNCTION"
C L "usb_flush_in" 8 115 1 "FUNCTION"
C L "usb_flush_in" 8 115 1 "FUNCTION"
C L "usb_flush_in" 8 115 1 "FUNCTION"
C L "usb_flush_in" 8 115 2 "FUNCTION"
C L "usb_flush_in" 8 115 2 "FUNCTION"
C L "usb_flush_in" 8 115 1 "FUNCTION"
C L "usb_put_packet" 8 115 1 "FUNCTION"
V L "endpoint" 8 717 "int8"
V L "ptr" 8 717 "*int8"
V L "len" 8 717 "int16"
V L "tgl" 8 717 "USB_DTS_BIT"
F G "usb_put_packet" 8 717 "int8(int8 endpoint,*int8 ptr,int16 len,USB_DTS_BIT tgl,*int8 ptr,int16 max)"
V L "buff_add" 8 719 "*int8"
C L "usb_put_packet" 8 115 2 "FUNCTION"
C L "usb_flush_out" 8 115 1 "FUNCTION"
V L "endpoint" 8 739 "int8"
V L "tgl" 8 739 "USB_DTS_BIT"
F G "usb_flush_out" 8 739 "void(int8 endpoint,USB_DTS_BIT tgl,USB_DTS_BIT tgl,*int8 ptr,int16 max)"
V L "i" 8 741 "int8"
V L "len" 8 742 "int16"
C L "usb_flush_out" 8 115 1 "FUNCTION"
C L "usb_flush_out" 8 115 1 "FUNCTION"
C L "usb_flush_out" 8 115 1 "FUNCTION"
C L "usb_flush_out" 8 115 1 "FUNCTION"
C L "usb_flush_out" 8 115 1 "FUNCTION"
C L "usb_flush_out" 8 115 2 "FUNCTION"
C L "usb_rx_packet_size" 8 115 1 "FUNCTION"
V L "endpoint" 8 785 "int8"
F G "usb_rx_packet_size" 8 785 "int16(int8 endpoint,*int8 ptr,int16 max)"
C L "usb_get_packet_buffer" 8 115 17 "FUNCTION"
V L "endpoint" 8 811 "int8"
V L "ptr" 8 811 "*int8"
V L "max" 8 811 "int16"
F G "usb_get_packet_buffer" 8 811 "int16(int8 endpoint,*int8 ptr,int16 max)"
V L "al" 8 813 "*int8"
V L "st" 8 814 "int8"
V L "i" 8 815 "int16"
C L "usb_get_packet_buffer" 8 115 1 "FUNCTION"
C L "usb_get_packet" 8 115 1 "FUNCTION"
V L "endpoint" 8 833 "int8"
V L "ptr" 8 833 "*int8"
V L "max" 8 833 "int16"
F G "usb_get_packet" 8 833 "int16(int8 endpoint,*int8 ptr,int16 max)"
C L "usb_stall_ep" 8 115 1 "FUNCTION"
V L "endpoint" 8 842 "int8"
F G "usb_stall_ep" 8 842 "void(int8 endpoint,*int8 ptr,int16 max)"
V L "direction" 8 844 "int1"
C L "usb_unstall_ep" 8 115 1 "FUNCTION"
V L "endpoint" 8 860 "int8"
F G "usb_unstall_ep" 8 860 "void(int8 endpoint,int16 max)"
V L "direction" 8 862 "int1"
C L "usb_endpoint_stalled" 8 115 1 "FUNCTION"
V L "endpoint" 8 882 "int8"
F G "usb_endpoint_stalled" 8 882 "int8(int8 endpoint)"
V L "direction" 8 884 "int1"
V L "st" 8 885 "int8"
C L "usb_set_address" 8 115 1 "FUNCTION"
V L "address" 8 903 "int8"
F G "usb_set_address" 8 903 "void(int8 address)"
C L "usb_set_configured" 8 115 1 "FUNCTION"
V L "config" 8 918 "int8"
F G "usb_set_configured" 8 918 "void(int8 config)"
V L "en" 8 920 "int8"
V L "addy" 8 921 "int16"
V L "new_uep" 8 922 "int8"
V L "len" 8 923 "int16"
V L "i" 8 924 "int8"
C L "usb_set_configured" 8 115 1 "FUNCTION"
C L "usb_set_configured" 8 115 1 "FUNCTION"
C L "usb_set_configured" 8 115 1 "FUNCTION"
C L "usb_disable_endpoint" 8 115 1 "FUNCTION"
V L "en" 8 974 "int8"
F G "usb_disable_endpoint" 8 974 "void(int8 en)"
C L "usb_disable_endpoint" 8 115 1 "FUNCTION"
C L "usb_disable_endpoint" 8 115 1 "FUNCTION"
C L "usb_disable_endpoints" 8 115 1 "FUNCTION"
F G "usb_disable_endpoints" 8 986 "void(int8 en)"
V L "i" 8 988 "int8"
C L "usb_disable_endpoints" 8 115 1 "FUNCTION"
C L "usb_clear_trn" 8 115 2 "FUNCTION"
F G "usb_clear_trn" 8 1001 "void()" "UIR_TRN = 0;"
C L "usb_clear_trn" 8 115 1 "FUNCTION"
F G "usb_isr" 8 1025 "void()"
V L "TRNAttempts" 8 1027 "int8"
C L "usb_isr" 8 115 1 "FUNCTION"
C L "usb_isr" 8 115 1 "FUNCTION"
C L "usb_isr" 8 115 1 "FUNCTION"
C L "usb_isr" 8 115 1 "FUNCTION"
C L "usb_isr" 8 115 1 "FUNCTION"
C L "usb_isr" 8 115 1 "FUNCTION"
C L "usb_isr_sof" 8 115 1 "FUNCTION"
F G "usb_isr_sof" 8 1067 "void()"
C L "usb_isr_sof" 8 115 1 "FUNCTION"
C L "usb_isr_rst" 8 115 6 "FUNCTION"
F G "usb_isr_rst" 8 1082 "void()"
C L "usb_isr_rst" 8 115 1 "FUNCTION"
C L "usb_isr_rst" 8 115 1 "FUNCTION"
C L "usb_init_ep0_setup" 8 115 5 "FUNCTION"
F G "usb_init_ep0_setup" 8 1117 "void()"
C L "usb_init_ep0_setup" 8 115 1 "FUNCTION"
C L "usb_isr_uerr" 8 115 7 "FUNCTION"
F G "usb_isr_uerr" 8 1139 "void()"
C L "usb_isr_uerr" 8 115 1 "FUNCTION"
C L "usb_isr_uidle" 8 115 5 "FUNCTION"
F G "usb_isr_uidle" 8 1205 "void()"
C L "usb_isr_uidle" 8 115 2 "FUNCTION"
C L "usb_isr_uidle" 8 115 1 "FUNCTION"
C L "usb_isr_activity" 8 115 6 "FUNCTION"
F G "usb_isr_activity" 8 1225 "void()"
C L "usb_isr_activity" 8 115 1 "FUNCTION"
C L "usb_isr_activity" 8 115 1 "FUNCTION"
C L "usb_isr_activity" 8 115 1 "FUNCTION"
C L "usb_isr_stall" 8 115 5 "FUNCTION"
F G "usb_isr_stall" 8 1245 "void()"
C L "usb_isr_stall" 8 115 1 "FUNCTION"
C L "usb_request_send_response" 8 115 1 "FUNCTION"
V L "len" 8 1261 "int8"
F G "usb_request_send_response" 8 1261 "void(int8 len)"
F G "usb_request_get_data" 8 1262 "void(int8 len)"
F G "usb_request_stall" 8 1263 "void(int8 len)"
C L "usb_isr_tok_dne" 8 115 13 "FUNCTION"
F G "usb_isr_tok_dne" 8 1279 "void(int8 len)"
V L "en" 8 1281 "int8"
C L "usb_isr_tok_dne" 8 115 1 "FUNCTION"
V L "pidKey" 8 1291 "int8"
C L "usb_isr_tok_dne" 8 115 1 "FUNCTION"
C L "usb_isr_tok_dne" 8 115 1 "FUNCTION"
C L "usb_isr_tok_dne" 8 115 1 "FUNCTION"
C L "usb_isr_tok_dne" 8 115 4 "FUNCTION"
C L "usb_isr_tok_dne" 8 115 2 "FUNCTION"
C L "usb_isr_tok_dne" 8 115 1 "FUNCTION"
C L "usb_isr_tok_dne" 8 115 2 "FUNCTION"
C L "usb_isr_tok_dne" 8 115 1 "FUNCTION"
C L "usb_isr_tok_dne" 8 115 1 "FUNCTION"
C L "usb_isr_tok_dne" 8 115 1 "FUNCTION"
V G "USB_stack_status" 7 209 "TYPE_USB_STACK_STATUS"
V G "USB_address_pending" 7 211 "int8" "save previous state because packets can take several isrs"
V G "usb_getdesc_ptr" 7 212 "int16"
V G "usb_getdesc_len" 7 212 "int16" "for reading string and config descriptors"
F G "usb_put_0len_0" 7 218 "void()"
V L "endpoint" 7 219 "int8"
V L "status" 7 219 "*int16"
V L "buffer" 7 219 "*int16"
V L "size" 7 219 "*int8"
F G "usb_match_registers" 7 219 "void(int8 endpoint,*int16 status,*int16 buffer,*int8 size)"
F G "usb_isr_tkn_setup_StandardEndpoint" 7 221 "void()"
F G "usb_isr_tkn_setup_StandardDevice" 7 222 "void()"
F G "usb_isr_tkn_setup_StandardInterface" 7 223 "void()"
F G "usb_Get_Descriptor" 7 227 "void()"
F G "usb_copy_desc_seg_to_ep" 7 228 "void()"
F G "usb_finish_set_address" 7 229 "void()"
V G "USB_Interface" 7 231 "int8[2]" "config state for all of our interfaces, NUM_INTERFACES defined with descriptors"
C L "usb_finish_set_address" 7 233 2 "FUNCTION"
F G "usb_enumerated" 7 236 "int8()"
C L "usb_wait_for_enumeration" 7 233 1 "FUNCTION"
F G "usb_wait_for_enumeration" 7 242 "void()"
C L "usb_puts" 7 233 1 "FUNCTION"
V L "endpoint" 7 248 "int8"
V L "ptr" 7 248 "*int8"
V L "len" 7 248 "int16"
V L "timeout" 7 248 "int8"
F G "usb_puts" 7 248 "int8(int8 endpoint,*int8 ptr,int16 len,int8 timeout)"
V L "i" 7 249 "int16"
V L "res" 7 250 "int1"
V L "this_packet_len" 7 251 "int16"
V L "packet_size" 7 252 "int16"
V L "timeout_1us" 7 253 "int32"
C L "usb_puts" 7 233 2 "FUNCTION"
C L "usb_puts" 7 233 1 "FUNCTION"
C L "usb_puts" 7 233 2 "FUNCTION"
C L "usb_puts" 7 233 1 "FUNCTION"
C L "usb_puts" 7 233 1 "FUNCTION"
C L "usb_puts" 7 233 1 "FUNCTION"
C L "usb_gets" 7 233 1 "FUNCTION"
V L "endpoint" 7 297 "int8"
V L "ptr" 7 297 "*int8"
V L "max" 7 297 "int16"
V L "timeout" 7 297 "int16"
F G "usb_gets" 7 297 "int16(int8 endpoint,*int8 ptr,int16 max,int16 timeout)"
V L "ret" 7 298 "int16"
V L "to" 7 299 "int16"
V L "len" 7 300 "int16"
V L "packet_size" 7 301 "int16"
V L "this_packet_max" 7 302 "int16"
C L "usb_token_reset" 7 233 3 "FUNCTION"
F G "usb_token_reset" 7 333 "void()"
V L "i" 7 335 "int8"
C L "usb_token_reset" 7 233 1 "FUNCTION"
C L "usb_token_reset" 7 233 1 "FUNCTION"
C L "usb_token_reset" 7 233 1 "FUNCTION"
C L "usb_token_reset" 7 233 1 "FUNCTION"
D G "usb_put_0len_0" 7 359 "() usb_request_send_response(0)"
C L "usb_endpoint_is_valid" 7 233 10 "FUNCTION"
V L "endpoint" 7 372 "int8"
F G "usb_endpoint_is_valid" 7 372 "int8(int8 endpoint)"
V L "direction" 7 374 "int1"
C L "usb_endpoint_is_valid" 7 233 1 "FUNCTION"
C L "usb_endpoint_is_valid" 7 233 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 7 233 1 "FUNCTION"
V L "endpoint" 7 392 "int8"
F G "usb_isr_tok_in_dne" 7 392 "void(int8 endpoint)"
C L "usb_isr_tok_in_dne" 7 233 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 7 233 1 "FUNCTION"
C L "usb_isr_tok_out_dne" 7 233 1 "FUNCTION"
V L "endpoint" 7 405 "int8"
F G "usb_isr_tok_out_dne" 7 405 "void(int8 endpoint)" "TODO:"
C L "usb_isr_tok_out_dne" 7 233 2 "FUNCTION"
C L "usb_isr_tok_out_dne" 7 233 1 "FUNCTION"
C L "usb_isr_tok_out_dne" 7 233 2 "FUNCTION"
C L "usb_isr_tok_setup_dne" 7 233 2 "FUNCTION"
F G "usb_isr_tok_setup_dne" 7 430 "void(int8 endpoint)"
C L "usb_isr_tok_setup_dne" 7 233 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 7 233 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 7 233 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 7 233 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 7 233 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 7 233 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 7 233 10 "FUNCTION"
F G "usb_isr_tkn_setup_StandardDevice" 7 491 "void(int8 endpoint)"
C L "usb_isr_tkn_setup_StandardDevice" 7 233 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 7 233 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 7 233 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 7 233 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 7 233 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 7 233 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 7 233 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 7 233 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 7 233 10 "FUNCTION"
F G "usb_isr_tkn_setup_StandardInterface" 7 570 "void(int8 endpoint)"
V L "curr_config" 7 571 "int8"
C L "usb_isr_tkn_setup_StandardInterface" 7 233 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 7 233 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 7 233 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 7 233 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 7 233 3 "FUNCTION"
C L "usb_isr_tkn_setup_StandardEndpoint" 7 233 10 "FUNCTION"
F G "usb_isr_tkn_setup_StandardEndpoint" 7 630 "void()"
C L "usb_Get_Descriptor" 7 233 26 "FUNCTION"
F G "usb_Get_Descriptor" 7 728 "void()"
C L "usb_Get_Descriptor" 7 233 1 "FUNCTION"
C L "usb_Get_Descriptor" 7 233 1 "FUNCTION"
C L "usb_Get_Descriptor" 7 233 1 "FUNCTION"
C L "usb_Get_Descriptor" 7 233 1 "FUNCTION"
C L "usb_Get_Descriptor" 7 233 5 "FUNCTION"
C L "usb_Get_Descriptor" 7 233 3 "FUNCTION"
C L "usb_finish_set_address" 7 233 11 "FUNCTION"
F G "usb_finish_set_address" 7 808 "void()"
C L "usb_finish_set_address" 7 233 1 "FUNCTION"
C L "usb_finish_set_address" 7 233 1 "FUNCTION"
C L "usb_copy_desc_seg_to_ep" 7 233 3 "FUNCTION"
F G "usb_copy_desc_seg_to_ep" 7 825 "void()"
V L "i" 7 826 "int8"
V L "c" 7 827 "int8" "debug_usb(debug_putc, "!%LX! ", &usb_ep0_tx_buffer[0]);"
C L "usb_copy_desc_seg_to_ep" 7 233 1 "FUNCTION"
V G "usb_cdc_line_coding" 2 273 "{int32 dwDTERrate,int8 bCharFormat,int8 bParityType,int8 bDataBits}" "length of time, in ms, of break signal as we received in a SendBreak message."
V G "usb_cdc_break" 2 277 "int16"
V G "usb_cdc_encapsulated_cmd" 2 279 "int8[8]"
V G "usb_cdc_put_buffer" 2 281 "int8[63]"
D G "usb_cdc_put_buffer_free" 2 282 "()  usb_tbe(USB_CDC_DATA_IN_ENDPOINT)"
V G "usb_cdc_put_buffer_nextin" 2 288 "int8" "int8 usb_cdc_last_data_packet_size;"
V G "usb_cdc_get_buffer_status" 2 301 "{int1 got,int8 len,int8 index}"
D G "usb_cdc_get_buffer_status_buffer" 2 304 "usb_ep2_rx_buffer"
V G "usb_cdc_got_set_line_coding" 2 309 "int1"
V G "usb_cdc_carrier" 2 315 "{int1 dte_present,int1 active,int6 reserved}"
E G "USB_CDC_OUT_NOTHING" 2 317 "0"
E G "USB_CDC_OUT_COMMAND" 2 317 "1"
E G "USB_CDC_OUT_LINECODING" 2 317 "2"
E G "USB_CDC_WAIT_0LEN" 2 317 "3"
V G "__usb_cdc_state" 2 317 ""
C L "usb_isr_tok_out_cdc_control_dne" 2 256 1 "FUNCTION"
F G "usb_isr_tok_out_cdc_control_dne" 2 327 "void()"
C L "usb_isr_tok_out_cdc_control_dne" 2 256 1 "FUNCTION"
C L "usb_isr_tok_out_cdc_control_dne" 2 256 1 "FUNCTION"
C L "usb_isr_tok_out_cdc_control_dne" 2 256 2 "FUNCTION"
C L "usb_isr_tok_out_cdc_control_dne" 2 256 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 2 256 1 "FUNCTION"
F G "usb_isr_tkn_cdc" 2 367 "void()" "make sure the request goes to a CDC interface"
C L "usb_isr_tkn_cdc" 2 256 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 2 256 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 2 256 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 2 256 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 2 256 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 2 256 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 2 256 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 2 256 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 2 256 1 "FUNCTION"
C L "usb_isr_tok_out_cdc_data_dne" 2 256 1 "FUNCTION"
F G "usb_isr_tok_out_cdc_data_dne" 2 412 "void()"
C L "usb_isr_tok_in_cdc_data_dne" 2 256 1 "FUNCTION"
F G "usb_isr_tok_in_cdc_data_dne" 2 428 "void()"
F G "usb_cdc_flush_out_buffer" 2 433 "void()"
F G "usb_cdc_init" 2 444 "void()"
T G "cdc_serial_state_t" 2 473 "{int1 bRxCarrier,int1 bTxCarrier,int1 bBreak,int1 bRingSignal,int1 bFraming,int1 bParity,int1 bOverRun,int1 reserved0,int8 reserved1}" "Send SERIAL_STATE notification to the host.  This contains DSR, DCD, Ring,"
C L "usb_cdc_serial_state" 2 256 4 "FUNCTION"
V L "state" 2 482 "cdc_serial_state_t"
F G "usb_cdc_serial_state" 2 482 "int8(cdc_serial_state_t state)"
D G "CDC_EP1_NOTIFY_BUFFER" 2 485 "usb_ep1_tx_buffer"
C L "usb_cdc_serial_state" 2 256 1 "FUNCTION"
C L "usb_cdc_serial_state" 2 256 2 "FUNCTION"
C L "usb_cdc_serial_state" 2 256 2 "FUNCTION"
C L "usb_cdc_serial_state" 2 256 1 "FUNCTION"
C L "usb_cdc_serial_state" 2 256 1 "FUNCTION"
C L "usb_cdc_serial_state" 2 256 1 "FUNCTION"
C L "usb_cdc_serial_state" 2 256 1 "FUNCTION"
F G "usb_cdc_get_discard" 2 520 "void()"
F G "usb_cdc_getc" 2 526 "int8()"
V L "c" 2 528 "int8"
D G "__USB_PAUSE_ISR" 2 576 "()  int1 old_gie; old_gie = INT_GIE; INT_GIE = 0"
D G "__USB_RESTORE_ISR" 2 577 "() INT_GIE = old_gie"
V L "c" 2 605 "int8"
F G "_usb_cdc_putc_fast_noflush" 2 605 "void(int8 c)"
V L "old_gie" 2 607 "int1"
C L "_usb_cdc_putc_fast_noflush" 2 256 1 "FUNCTION"
V L "c" 2 617 "int8"
F G "usb_cdc_putc_fast" 2 617 "void(int8 c)"
C L "usb_cdc_putc_fast" 2 256 1 "FUNCTION"
C L "usb_cdc_putc_fast" 2 256 1 "FUNCTION"
V L "c" 2 638 "int8"
F G "usb_cdc_putc" 2 638 "void(int8 c)"
C L "usb_cdc_putc" 2 256 2 "FUNCTION"
C L "usb_cdc_putc" 2 256 2 "FUNCTION"
V L "ptr" 2 660 "*int8"
F G "usb_cdc_puts" 2 660 "int8(*int8 ptr)"
V L "i" 2 665 "int8"
V L "c" 2 667 "int8"
D G "_CTYPE" 9 12 ""
D G "islower" 9 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 9 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 9 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 9 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 9 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 9 19 "(x)  ((x)==' ')"
D G "isxdigit" 9 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 9 21 "(x)  ((x)<' ')"
D G "isprint" 9 22 "(x)  ((x)>=' ')"
D G "isgraph" 9 23 "(x)  ((x)>' ')"
D G "ispunct" 9 24 "(x)  (((x)>' ')&&!isalnum(x))"
F G "gethex1_usb" 2 693 "int8()"
V L "digit" 2 695 "int8"
F G "gethex_usb" 2 707 "int8()"
V L "lo" 2 708 "int8"
V L "hi" 2 708 "int8"
V L "s" 2 718 "*int8"
V L "max" 2 718 "int8"
F G "get_string_usb" 2 718 "void(*int8 s,int8 max,int8 asciiByte)"
V L "len" 2 719 "int8"
V L "c" 2 720 "int8"
C L "get_string_usb" 2 726 1 "FUNCTION"
D G "byte" 10 24 "int"
D G "IOPointer" 10 32 "int16"
D G "CMD_PING" 10 39 "0x00"
D G "CMD_READ_SENSOR" 10 40 "0x01"
D G "CMD_MOTOR_CONTROL" 10 41 "0x02"
D G "CMD_MOTOR_POWER" 10 42 "0x03"
D G "CMD_TALK_TO_MOTOR" 10 43 "0x04"
D G "CMD_BURST_MODE" 10 44 "0x05"
D G "CMD_MISC_CONTROL" 10 45 "0x06"
D G "TURN_USER_LED_ON" 10 47 "0"
D G "TURN_USER_LED_OFF" 10 48 "1"
D G "MISC_USER_LED" 10 50 "0"
D G "MISC_BEEP" 10 51 "1"
D G "MISC_SET_PWM" 10 52 "2"
D G "MISC_UPLOAD_EEPROM" 10 53 "3"
D G "MISC_I2C_SETUP" 10 54 "4"
D G "MISC_AUTORUN_CONFIG" 10 56 "5"
D G "I2C_START" 10 58 "0"
D G "I2C_STOP" 10 59 "1"
D G "I2C_WRITE" 10 60 "2"
D G "I2C_READ" 10 61 "3"
D G "AUTORUN_ON" 10 63 "1"
D G "AUTORUN_OFF" 10 64 "0"
D G "MTR_ON" 10 69 "0"
D G "MTR_OFF" 10 70 "1"
D G "MTR_RD" 10 71 "2"
D G "MTR_THISWAY" 10 72 "3"
D G "MTR_THATWAY" 10 73 "4"
D G "MTR_COAST" 10 74 "5"
D G "ACK_BYTE" 10 77 "0b10101010" "0xAA"
D G "InHeader1" 10 78 "0x54"
D G "InHeader2" 10 79 "0xfe"
D G "ReplyHeader1" 10 80 "0x55"
D G "ReplyHeader2" 10 81 "0xff"
D G "EEPROMuploadHeader1" 10 83 "0xEE"
D G "EEPROMuploadHeader2" 10 84 "0x11"
D G "ON" 10 86 "1"
D G "OFF" 10 87 "0"
D G "RETRY" 10 91 "100"
D G "NORMAL_READ" 10 95 "0"
D G "MAX_READ" 10 96 "1"
D G "MIN_READ" 10 97 "2"
D G "MEAN_READ" 10 98 "3"
D G "ONE_BYTE_CMD" 10 105 "3"
D G "MotorCount" 10 109 "4"
D G "MOTOR_NORMAL" 10 112 "0"
D G "MOTOR_SERVO" 10 113 "1"
D G "MTR1_CW" 10 117 "PIN_D0" "MD12"
D G "MTR1_CC" 10 118 "PIN_D1" "MD11"
D G "MTR2_CW" 10 121 "PIN_D2" "MD22"
D G "MTR2_CC" 10 122 "PIN_D3" "MD21"
D G "MTR3_CW" 10 125 "PIN_B2" "MD32"
D G "MTR3_CC" 10 126 "PIN_B3" "MD31"
D G "MTR4_CW" 10 129 "PIN_B5" "MD42"
D G "MTR4_CC" 10 130 "PIN_B4" "ME41"
D G "MOTOR_AB_EN" 10 152 "PIN_E6" "controls the power to the motor chip"
D G "MOTOR_CD_EN" 10 153 "PIN_B1" "controls the power to the motor chip"
D G "PIC_TRIS_A" 10 157 "0b00101111" "A0,1,2,3,5 are Analog inputs"
D G "PIC_TRIS_B" 10 158 "0b00000001" "B0 is the run button"
D G "PIC_TRIS_C" 10 159 "0b10010000" "C7 = Rs232 Rx"
D G "PIC_TRIS_D" 10 162 "0b00000000"
D G "PIC_TRIS_E" 10 163 "0b10000000" "E7 = IR input"
D G "PIC_TRIS_F" 10 164 "0b01111100"
D G "PIC_TRIS_G" 10 165 "0b00000000"
D G "RUN_BUTTON" 10 168 "PIN_B0"
D G "USER_LED" 10 169 "PIN_C0"
D G "USER_LED2" 10 170 "PIN_C1"
D G "RUN_LED" 10 171 "USER_LED2"
D G "USER_LED_ON" 10 178 "output_high(USER_LED)"
D G "USER_LED_OFF" 10 179 "output_low(USER_LED)"
D G "WAITING_FOR_FIRST_HEADER" 10 186 "1"
D G "WAITING_FOR_SECOND_HEADER" 10 187 "2"
D G "WAITING_FOR_CMD_BYTE" 10 188 "3"
D G "WAITING_FOR_SECOND_CMD_BYTE" 10 189 "4"
D G "CMD_READY" 10 190 "5"
D G "WAITING_FOR_EXT_CMD_LENGTH" 10 192 "6"
D G "WAITING_FOR_EXT_CMD_STREAM" 10 193 "7"
D G "I2C_SCL" 10 199 "PIN_C3"
D G "I2C_SDA" 10 200 "PIN_C4"
D G "PIEZO" 10 203 "PIN_C2"
D G "LOCAL" 10 205 "0"
D G "REMOTE" 10 206 "1"
D G "SERIAL_BUFFER_SIZE" 10 213 "32"
D G "SERIAL_NO_DATA" 10 215 "0"
D G "SERIAL_SUCCESS" 10 216 "1"
D G "SERIAL_OVERFLOW" 10 217 "2"
D G "DISPLAY_7SEG_ADDR_1" 10 223 "0xB0"
D G "DISPLAY_7SEG_ADDR_2" 10 224 "0xB2"
D G "DISPLAY_LCD_ADDR_1" 10 225 "0xB4"
D G "DISPLAY_LCD_ADDR_2" 10 226 "0xB6"
D G "COMM_SERIAL" 10 230 "1"
D G "COMM_USB" 10 231 "2"
D G "READY_FOR_NEXT" 11 2 "0x11"
D G "FINISH_FLAG" 11 3 "0x55"
D G "BOOTLOADER_OVERWRITE" 11 4 "0x80"
D G "ERROR_TIMEOUT" 11 5 "0x88"
D G "SerBufferSize" 11 8 "16" "serial input buffer size"
V L "asciiByte" 11 10 "int8"
F G "a2i" 11 10 "int8(int8 asciiByte)"
F G "read8" 11 11 "int8()"
V L "memoryBlockAddress" 11 12 "int16"
V L "positionInMemoryBlock" 11 12 "int16"
V L "len" 11 12 "int16"
V L "Buffer" 11 12 "*int8"
F G "writeFlash" 11 12 "void(int16 memoryBlockAddress,int16 positionInMemoryBlock,int16 len,*int8 Buffer)"
V L "targetByte" 11 13 "int8"
F G "waitFor" 11 13 "int8(int8 targetByte)"
F G "downloadBootloader" 11 14 "void()" "#use rs232(baud=9600,UART1)"
C L "downloadBootloader" 12 2 22 "FUNCTION"
D G "STACK_SIZE" 13 23 "64"
D G "INPUT_STACK_SIZE" 13 24 "64"
V G "gblStkPtr" 13 26 "int8" "ptr to the top of the data stack"
V G "gblErrFlag" 13 27 "int8" "error flag"
V G "gblStack" 13 28 "int16[64]"
V G "gblInputStkPtr" 13 31 "int8" "ptr to the top of the procedure input stack"
V G "gblInputStack" 13 32 "int16[64]"
V L "stackItem" 13 35 "int16"
F G "stkPush" 13 35 "void(int16 stackItem)"
F G "stkPop" 13 36 "int16()"
V L "stackItem" 13 38 "int16"
F G "inputPush" 13 38 "void(int16 stackItem)"
F G "inputPop" 13 39 "int16()"
F G "clearStack" 13 41 "void()" "evalopcode.h - Header declarations for the Logo Operations"
C L "clearStack" 14 4 21 "FUNCTION"
V G "gblLoopAddress" 14 40 "int16"
C L "clearStack" 14 4 1 "FUNCTION"
V G "gblRepeatCount" 14 41 "int16"
C L "clearStack" 14 4 1 "FUNCTION"
V G "gblONFORNeedsToFinish" 14 43 "int1"
C L "clearStack" 14 4 3 "FUNCTION"
V L "opcode" 14 47 "int8"
F G "evalOpcode" 14 47 "void(int8 opcode)"
V L "opcode" 14 48 "int8"
F G "evalOpcode2" 14 48 "void(int8 opcode)" "memoryMap.c - Defines the memory segments and their addresses"
C L "evalOpcode2" 15 4 12 "FUNCTION"
C L "evalOpcode2" 16 2 13 "FUNCTION"
D G "EEPROM_ADDRESS" 17 21 "0xa0"
D G "EEPROM_SIZE" 17 22 "32768"
C L "evalOpcode2" 17 2 1 "FUNCTION"
F G "init_ext_eeprom" 17 25 "void()"
V L "address" 17 33 "int16"
V L "data" 17 33 "int8"
F G "write_ext_eeprom" 17 33 "void(int16 address,int8 data)"
V L "status" 17 35 "int1"
C L "write_ext_eeprom" 17 2 2 "FUNCTION"
C L "write_ext_eeprom" 17 2 8 "FUNCTION"
V L "address" 17 64 "int16"
F G "read_ext_eeprom" 17 64 "int8(int16 address)"
V L "data" 17 65 "int8"
D G "FLASH32KWORDS" 15 23 ""
D G "FLASH_BOOTLOADER_BASE_ADDRESS" 15 276 "0xFA00"
D G "RUN_BUTTON_BASE_ADDRESS" 15 283 "0xF9E0"
D G "MEM_PTR_LOG_BASE_ADDRESS" 15 297 "0xF9F0"
D G "AUTORUN_STATUS_ADDRESS" 15 305 "0xF9F2"
D G "FLASH_USER_PROGRAM_BASE_ADDRESS" 15 311 "0xE800"
D G "ARRAY_BASE_ADDRESS" 15 316 "0xE400"
D G "RECORD_BASE_ADDRESS" 15 322 "RESERVED_MEMORY_START"
D G "IDLE" 12 49 "0"
D G "SET_PTR_HI_BYTE" 12 53 "128"
D G "SET_PTR_LOW_BYTE" 12 54 "129"
D G "READ_BYTES_COUNT_HI" 12 55 "130"
D G "READ_BYTES_COUNT_LOW" 12 56 "131"
D G "WRITE_BYTES_COUNT_HI" 12 57 "132"
D G "WRITE_BYTES_COUNT_LOW" 12 58 "133"
D G "WRITE_BYTES_SENDING" 12 59 "134"
D G "CRICKET_NAME" 12 60 "135"
D G "SET_PTR" 12 66 "0x83"
D G "READ_BYTES" 12 67 "0x84"
D G "WRITE_BYTES" 12 68 "0x85"
D G "RUN" 12 69 "0x86"
D G "CRICKET_CHECK" 12 70 "0x87"
D G "CODE_END" 12 81 "0"
D G "NUM8" 12 82 "1"
D G "NUM16" 12 83 "2"
D G "LIST" 12 84 "3"
D G "EOL" 12 85 "4"
D G "EOLR" 12 86 "5"
D G "LTHING" 12 87 "6"
D G "STOP" 12 88 "7"
D G "OUTPUT" 12 89 "8"
D G "REPEAT" 12 90 "9"
D G "COND_IF" 12 91 "10"
D G "COND_IFELSE" 12 92 "11"
D G "BEEP" 12 93 "12"
D G "NOTE" 12 94 "13"
D G "WAITUNTIL" 12 95 "14"
D G "LOOP" 12 96 "15"
D G "WAIT" 12 97 "16"
D G "TIMER" 12 98 "17"
D G "RESETT" 12 99 "18"
D G "SEND" 12 100 "19"
D G "IR" 12 101 "20"
D G "NEWIR" 12 102 "21"
D G "RANDOM" 12 103 "22"
D G "OP_PLUS" 12 104 "23"
D G "OP_MINUS" 12 105 "24"
D G "OP_MULTIPLY" 12 106 "25"
D G "OP_DIVISION" 12 107 "26"
D G "OP_REMAINDER" 12 108 "27"
D G "OP_EQUAL" 12 109 "28"
D G "OP_GREATER" 12 110 "29"
D G "OP_LESS" 12 111 "30"
D G "OP_AND" 12 112 "31"
D G "OP_OR" 12 113 "32"
D G "OP_XOR" 12 114 "33"
D G "OP_NOT" 12 115 "34"
D G "SETGLOBAL" 12 116 "35"
D G "GETGLOBAL" 12 117 "36"
D G "ASET" 12 118 "37"
D G "AGET" 12 119 "38"
D G "RECORD" 12 120 "39"
D G "RECALL" 12 121 "40"
D G "RESETDP" 12 122 "41"
D G "SETDP" 12 123 "42"
D G "ERASE" 12 124 "43"
D G "WHEN" 12 125 "44"
D G "WHENOFF" 12 126 "45"
D G "M_A" 12 127 "46"
D G "M_B" 12 128 "47"
D G "M_AB" 12 129 "48"
D G "M_ON" 12 130 "49"
D G "M_ONFOR" 12 131 "50"
D G "M_OFF" 12 132 "51"
D G "M_THISWAY" 12 133 "52"
D G "M_THATWAY" 12 134 "53"
D G "M_RD" 12 135 "54"
D G "SENSOR1" 12 136 "55"
D G "SENSOR2" 12 137 "56"
D G "SWITCH1" 12 138 "57"
D G "SWITCH2" 12 139 "58"
D G "SETPOWER" 12 140 "59"
D G "BRAKE" 12 141 "60"
D G "BSEND" 12 142 "61"
D G "BSR" 12 143 "62"
D G "M_C" 12 144 "63"
D G "M_D" 12 145 "64"
D G "M_CD" 12 146 "65"
D G "M_ABCD" 12 147 "66"
D G "FASTSEND" 12 148 "67"
D G "REALLY_STOP" 12 149 "68"
D G "EB" 12 150 "69"
D G "DB" 12 151 "70"
D G "LOW_BYTE" 12 152 "71"
D G "HIGH_BYTE" 12 153 "72"
D G "SENSOR3" 12 156 "73"
D G "SENSOR4" 12 157 "74"
D G "SENSOR5" 12 158 "75"
D G "SENSOR6" 12 159 "76"
D G "SENSOR7" 12 160 "77"
D G "SENSOR8" 12 161 "78"
D G "SWITCH3" 12 162 "79"
D G "SWITCH4" 12 163 "80"
D G "SWITCH5" 12 164 "81"
D G "SWITCH6" 12 165 "82"
D G "SWITCH7" 12 166 "83"
D G "SWITCH8" 12 167 "84"
D G "ULED_ON" 12 169 "85"
D G "ULED_OFF" 12 170 "86"
D G "SERVO_SET_H" 12 172 "87"
D G "SERVO_LT" 12 173 "88"
D G "SERVO_RT" 12 174 "89"
D G "TALK_TO_MOTOR" 12 176 "90" "this replaces the M_A, M_B, M_C, ... commands."
D G "CL_I2C_START" 12 182 "91"
D G "CL_I2C_STOP" 12 183 "92"
D G "CL_I2C_WRITE" 12 184 "93"
D G "CL_I2C_READ" 12 185 "94"
D G "SERIAL" 12 188 "95"
D G "NEWSERIAL" 12 189 "96"
D G "RTC_INIT" 12 192 "97"
D G "RTC_GET_ITEM" 12 193 "98"
D G "DISPLAY_SHOW" 12 196 "99"
D G "DISPLAY_CLS" 12 198 "100"
D G "DISPLAY_GETPOS" 12 199 "101" "does nothing on 7-segment displays"
D G "DISPLAY_SETPOS" 12 200 "102" "returns 0 on 7-segment displays"
D G "TALK_TO_7SEG_1" 12 201 "103"
D G "TALK_TO_7SEG_2" 12 202 "104"
D G "TALK_TO_LCD_1" 12 203 "105"
D G "TALK_TO_LCD_2" 12 204 "106"
V G "globalVariables" 12 212 "int16[16]"
V G "gblRecordPtr" 12 214 "int16" "pointer to the current location in the data eeprom"
V G "gblMemPtr" 12 218 "int16" "FLASH/EEPROM pointer"
V G "gblRWCount" 12 219 "int16" "Read/Write length"
C L "sendBytes" 12 47 1 "FUNCTION"
V L "memPtr" 12 222 "int16"
V L "count" 12 222 "int16"
F G "sendBytes" 12 222 "void(int16 memPtr,int16 count)"
F G "fetchNextOpcode" 12 223 "int8()" "(C) Copyright 1996,2007 Custom Computer Services           ////"
D G "_STDLIB" 18 12 ""
D G "RAND_MAX" 18 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 18 25 "1"
T G "div_t" 18 33 "{sint8 quot,sint8 rem}"
T G "ldiv_t" 18 38 "{sint16 quot,sint16 rem}" "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 19 13 ""
D G "ptrdiff_t" 19 18 "unsigned int16"
D G "size_t" 19 24 "unsigned int16"
D G "wchar_t" 19 26 "char"
D G "NULL" 19 27 "0"
D G "offsetof" 19 29 "(s,f) (offsetofbit(s,f)/8)"
C L "fetchNextOpcode" 18 43 2 "FUNCTION"
C L "fetchNextOpcode" 18 46 1 "*"
C L "fetchNextOpcode" 18 46 1 "*"
V L "s" 18 50 "*int8"
F G "atoi" 18 50 "sint8(*int8 s)" "Syntax: signed int32  atoi32(char * s)"
V L "s" 18 58 "*int8"
F G "atoi32" 18 58 "sint32(*int8 s)"
C L "atoi32" 18 46 3 "FUNCTION"
V L "num" 18 79 "sint32"
V L "base" 18 79 "int8"
V L "s" 18 79 "*int8"
F G "itoa" 18 79 "*int8(sint32 num,int8 base,*int8 s)" "Standard template: signed int16  atol(char * s)"
C L "itoa" 18 81 1 "*"
C L "itoa" 18 81 1 "*"
V L "s" 18 85 "*int8"
F G "atol" 18 85 "sint16(*int8 s)" "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 18 87 1 "*"
C L "atol" 18 87 1 "*"
C L "atol" 18 87 1 "*"
C L "atol" 18 87 1 "*"
V L "s" 18 93 "*int8"
V L "endptr" 18 93 "*int8"
V L "base" 18 93 "sint8"
F G "strtol" 18 93 "sint16(*int8 s,*int8 endptr,sint8 base)" "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 18 95 1 "*"
C L "strtol" 18 95 1 "*"
C L "strtol" 18 95 1 "*"
C L "strtol" 18 95 1 "*"
V L "s" 18 101 "*int8"
V L "endptr" 18 101 "*int8"
V L "base" 18 101 "sint8"
F G "strtoul" 18 101 "int16(*int8 s,*int8 endptr,sint8 base)" "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 18 95 2 "FUNCTION"
C L "strtoul" 18 103 1 "*"
C L "strtoul" 18 103 1 "*"
C L "strtoul" 18 103 1 "*"
V L "s" 18 110 "*int8"
V L "endptr" 18 110 "*int8"
F G "strtof" 18 110 "float(*int8 s,*int8 endptr)"
D G "strtof48" 18 116 "(s, e) strtof(s, e)"
D G "strtod" 18 117 "(s, e) strtof(s, e)"
C L "strtof" 18 103 1 "FUNCTION"
C L "strtof" 18 120 1 "*"
D G "atof" 18 124 "(s)   strtof(s, 0)"
C L "strtof" 18 120 1 "FUNCTION"
C L "strtof" 18 143 1 "*"
C L "strtof" 18 143 1 "*"
C L "strtof" 18 143 1 "*"
V L "s" 18 149 "*int8"
F G "atoe" 18 149 "float(*int8 s)"
C L "atoe" 18 143 2 "FUNCTION"
C L "atoe" 18 160 1 "*"
C L "atoe" 18 160 1 "*"
C L "atoe" 18 160 1 "*"
C L "atoe" 18 160 1 "*"
C L "atoe" 18 160 1 "*"
F G "rand" 18 169 "int16()" "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 18 171 1 "*"
C L "rand" 18 171 1 "*"
C L "rand" 18 171 1 "*"
C L "rand" 18 171 1 "*"
C L "rand" 18 171 1 "*"
C L "rand" 18 171 1 "*"
C L "rand" 18 171 1 "*"
C L "rand" 18 171 1 "*"
C L "rand" 18 171 1 "*"
C L "rand" 18 171 1 "*"
C L "rand" 18 171 1 "*"
C L "rand" 18 171 1 "*"
C L "rand" 18 171 1 "*"
C L "rand" 18 171 1 "*"
C L "rand" 18 171 1 "*"
V L "seed" 18 191 "int32"
F G "srand" 18 191 "void(int32 seed)" "Memory management functions"
C L "srand" 18 171 3 "FUNCTION"
V L "string" 18 205 "*int8"
F G "system" 18 205 "sint8(*int8 string)" "Searching and sorting utilities"
C L "system" 18 171 1 "FUNCTION"
C L "system" 18 211 1 "*"
C L "system" 18 211 1 "*"
C L "system" 18 211 1 "*"
C L "system" 18 211 1 "*"
C L "system" 18 211 1 "*"
C L "system" 18 211 1 "*"
C L "system" 18 211 1 "*"
C L "system" 18 211 1 "*"
C L "system" 18 211 1 "*"
C L "system" 18 211 1 "*"
C L "system" 18 211 4 "*"
C L "system" 18 229 1 "*"
C L "system" 18 229 1 "*"
C L "system" 18 229 1 "*"
C L "system" 18 229 1 "*"
C L "system" 18 229 1 "*"
C L "system" 18 229 1 "*"
C L "system" 18 229 1 "*"
C L "system" 18 229 1 "*"
D G "labs" 18 249 "abs"
V L "numer" 18 251 "sint8"
V L "denom" 18 251 "sint8"
F G "div" 18 251 "div_t(sint8 numer,sint8 denom)"
V L "numer" 18 252 "sint16"
V L "denom" 18 252 "sint16"
F G "ldiv" 18 252 "ldiv_t(sint16 numer,sint16 denom)" "Multibyte character functions"
C L "ldiv" 18 229 4 "FUNCTION"
C L "ldiv" 19 2 7 "FUNCTION"
D G "_STRING" 20 12 ""
C L "ldiv" 19 2 7 "FUNCTION"
C L "ldiv" 9 2 7 "FUNCTION"
C L "ldiv" 20 19 10 "FUNCTION"
V L "s1" 20 34 "*int8"
V L "s2" 20 34 "*int8"
V L "n" 20 34 "int16"
F G "memmove" 20 34 "*int8(*int8 s1,*int8 s2,int16 n)"
V L "sc1" 20 36 "*int8"
V L "sc2" 20 37 "*int8"
D G "strcopy" 20 54 "strcpy"
C L "strncpy" 20 19 4 "FUNCTION"
V L "s1" 20 61 "*int8"
V L "s2" 20 61 "*int8"
V L "n" 20 61 "int16"
F G "strncpy" 20 61 "*int8(*int8 s1,*int8 s2,int16 n)"
V L "s" 20 63 "*int8"
C L "strcat" 20 19 3 "FUNCTION"
V L "s1" 20 78 "*int8"
V L "s2" 20 78 "*int8"
F G "strcat" 20 78 "*int8(*int8 s1,*int8 s2)"
V L "s" 20 80 "*int8"
C L "strncat" 20 19 2 "FUNCTION"
V L "s1" 20 96 "*int8"
V L "s2" 20 96 "*int8"
V L "n" 20 96 "int16"
F G "strncat" 20 96 "*int8(*int8 s1,*int8 s2,int16 n)"
V L "s" 20 98 "*int8"
C L "memcmp" 20 19 3 "FUNCTION"
V L "s1" 20 120 "*int8"
V L "s2" 20 120 "*int8"
V L "n" 20 120 "int16"
F G "memcmp" 20 120 "sint8(*int8 s1,*int8 s2,int16 n)"
V L "su1" 20 122 "*int8"
V L "su2" 20 122 "*int8"
C L "strcmp" 20 19 2 "FUNCTION"
V L "s1" 20 134 "*int8"
V L "s2" 20 134 "*int8"
F G "strcmp" 20 134 "sint8(*int8 s1,*int8 s2)"
C L "strcoll" 20 19 2 "FUNCTION"
V L "s1" 20 144 "*int8"
V L "s2" 20 144 "*int8"
F G "strcoll" 20 144 "sint8(*int8 s1,*int8 s2)"
C L "strncmp" 20 19 4 "FUNCTION"
V L "s1" 20 157 "*int8"
V L "s2" 20 157 "*int8"
V L "n" 20 157 "int16"
F G "strncmp" 20 157 "sint8(*int8 s1,*int8 s2,int16 n)"
C L "strxfrm" 20 19 3 "FUNCTION"
V L "s1" 20 169 "*int8"
V L "s2" 20 169 "*int8"
V L "n" 20 169 "int16"
F G "strxfrm" 20 169 "int16(*int8 s1,*int8 s2,int16 n)"
V L "s" 20 171 "*int8"
V L "n1" 20 172 "int8"
C L "memchr" 20 19 3 "FUNCTION"
V L "s" 20 191 "*int8"
V L "c" 20 191 "int8"
V L "n" 20 191 "int16"
F G "memchr" 20 191 "*int8(*int8 s,int8 c,int16 n)"
V L "uc" 20 193 "int8"
V L "su" 20 194 "*int8"
C L "strchr" 20 19 2 "FUNCTION"
V L "s" 20 205 "*int8"
V L "c" 20 205 "int8"
F G "strchr" 20 205 "*int8(*int8 s,int8 c)"
C L "strcspn" 20 19 4 "FUNCTION"
V L "s1" 20 217 "*int8"
V L "s2" 20 217 "*int8"
F G "strcspn" 20 217 "int8(*int8 s1,*int8 s2)"
V L "sc1" 20 219 "*int8"
V L "sc2" 20 219 "*int8"
C L "strpbrk" 20 19 4 "FUNCTION"
V L "s1" 20 232 "*int8"
V L "s2" 20 232 "*int8"
F G "strpbrk" 20 232 "*int8(*int8 s1,*int8 s2)"
V L "sc1" 20 234 "*int8"
V L "sc2" 20 234 "*int8"
C L "strrchr" 20 19 2 "FUNCTION"
V L "s" 20 247 "*int8"
V L "c" 20 247 "int8"
F G "strrchr" 20 247 "*int8(*int8 s,int8 c)"
V L "p" 20 249 "*int8"
C L "strspn" 20 19 2 "FUNCTION"
V L "s1" 20 262 "*int8"
V L "s2" 20 262 "*int8"
F G "strspn" 20 262 "int8(*int8 s1,*int8 s2)"
V L "sc1" 20 264 "*int8"
V L "sc2" 20 264 "*int8"
C L "strstr" 20 19 6 "FUNCTION"
V L "s1" 20 281 "*int8"
V L "s2" 20 281 "*int8"
F G "strstr" 20 281 "*int8(*int8 s1,*int8 s2)"
V L "s" 20 283 "*int8"
V L "t" 20 283 "*int8"
C L "strtok" 20 19 13 "FUNCTION"
V L "s1" 20 320 "*int8"
V L "s2" 20 320 "*int8"
F G "strtok" 20 320 "*int8(*int8 s1,*int8 s2)"
V L "beg" 20 322 "*int8"
V L "end" 20 322 "*int8"
V L "save" 20 323 "*int8"
C L "strlen" 20 19 6 "FUNCTION"
V L "s" 20 369 "*int8"
F G "strlen" 20 369 "int8(*int8 s)"
V L "sc" 20 371 "*int8"
C L "stricmp" 20 19 2 "FUNCTION"
V L "s1" 20 380 "*int8"
V L "s2" 20 380 "*int8"
F G "stricmp" 20 380 "sint8(*int8 s1,*int8 s2)"
C L "strlwr" 20 19 3 "FUNCTION"
V L "s" 20 394 "*int8"
F G "strlwr" 20 394 "*int8(*int8 s)"
V L "p" 20 396 "*int8"
C L "strupr" 20 19 3 "FUNCTION"
V L "s" 20 408 "*int8"
F G "strupr" 20 408 "*int8(*int8 s)"
V L "p" 20 410 "*int8"
V L "numer" 18 274 "sint8"
V L "denom" 18 274 "sint8"
F G "div" 18 274 "div_t(sint8 numer,sint8 denom,sint8 )"
V L "val" 18 276 "div_t"
V L "numer" 18 282 "sint16"
V L "denom" 18 282 "sint16"
F G "ldiv" 18 282 "ldiv_t(sint16 numer,sint16 denom,sint16 )"
V L "val" 18 284 "ldiv_t"
V L "s" 18 361 "*int8"
F G "atoe" 18 361 "float(*int8 s)"
V L "pow10" 18 363 "float"
V L "result" 18 364 "float"
V L "sign" 18 365 "int8"
V L "expsign" 18 366 "int8"
V L "c" 18 367 "int8"
V L "ptr" 18 368 "int8"
V L "i" 18 369 "int8"
V L "exp" 18 370 "float"
V L "expcnt" 18 371 "int8"
C L "atoe" 18 397 1 "FUNCTION"
V L "s" 18 429 "*int8"
F G "atoi" 18 429 "sint8(*int8 s)"
V L "result" 18 431 "sint8"
V L "sign" 18 432 "int8"
V L "base" 18 432 "int8"
V L "index" 18 432 "int8"
V L "c" 18 433 "int8"
C L "atoi" 18 397 1 "FUNCTION"
C L "atoi" 18 397 1 "FUNCTION"
C L "atoi" 18 397 1 "FUNCTION"
C L "atoi" 18 397 1 "FUNCTION"
C L "atoi" 18 397 1 "FUNCTION"
C L "atoi" 18 397 1 "FUNCTION"
V L "s" 18 498 "*int8"
F G "atol" 18 498 "sint16(*int8 s)"
V L "result" 18 500 "sint16"
V L "sign" 18 501 "int8"
V L "base" 18 501 "int8"
V L "index" 18 501 "int8"
V L "c" 18 502 "int8"
C L "atol" 18 397 1 "FUNCTION"
C L "atol" 18 397 1 "FUNCTION"
C L "atol" 18 397 1 "FUNCTION"
C L "atol" 18 397 1 "FUNCTION"
C L "mult_with10" 18 397 1 "FUNCTION"
V L "num" 18 565 "int32"
F G "mult_with10" 18 565 "sint32(int32 num)"
V L "s" 18 571 "*int8"
F G "atoi32" 18 571 "sint32(*int8 s)"
V L "result" 18 573 "sint32"
V L "sign" 18 574 "int8"
V L "base" 18 574 "int8"
V L "index" 18 574 "int8"
V L "c" 18 575 "int8"
C L "atoi32" 18 397 1 "FUNCTION"
C L "atoi32" 18 397 1 "FUNCTION"
C L "atoi32" 18 397 1 "FUNCTION"
C L "atoi32" 18 397 1 "FUNCTION"
C L "atoi32" 18 397 1 "FUNCTION"
V L "num" 18 770 "sint32"
V L "base" 18 770 "int8"
V L "s" 18 770 "*int8"
F G "itoa" 18 770 "*int8(sint32 num,int8 base,*int8 s)"
V L "temp" 18 772 "int32"
V L "i" 18 773 "int8"
V L "sign" 18 773 "int8"
V L "cnt" 18 773 "int8"
V L "c" 18 774 "int8"
C L "itoa" 18 397 1 "FUNCTION"
C L "itoa" 18 397 1 "FUNCTION"
C L "itoa" 18 397 1 "FUNCTION"
C L "itoa" 18 397 1 "FUNCTION"
C L "itoa" 18 397 1 "FUNCTION"
V L "s" 18 885 "*int8"
V L "endptr" 18 885 "*int8"
F G "strtof" 18 885 "float(*int8 s,*int8 endptr)"
V L "pow10" 18 887 "float"
V L "result" 18 888 "float"
V L "skip" 18 889 "int1"
V L "sign" 18 889 "int1"
V L "point" 18 889 "int1"
V L "c" 18 890 "int8"
V L "ptr" 18 891 "int8"
V L "s" 18 1103 "*int8"
V L "endptr" 18 1103 "*int8"
V L "base" 18 1103 "sint8"
F G "strtoul" 18 1103 "int16(*int8 s,*int8 endptr,sint8 base)"
V L "sc" 18 1105 "*int8"
V L "s1" 18 1105 "*int8"
V L "sd" 18 1105 "*int8"
V L "x" 18 1106 "int16"
V L "sign" 18 1107 "int8"
V L "digits" 18 1108 "int8[1]"
C L "strtoul" 18 397 1 "FUNCTION"
C L "strtoul" 18 397 1 "FUNCTION"
C L "strtoul" 18 397 1 "FUNCTION"
V L "s" 18 1165 "*int8"
V L "endptr" 18 1165 "*int8"
V L "base" 18 1165 "sint8"
F G "strtol" 18 1165 "sint16(*int8 s,*int8 endptr,sint8 base)"
V L "sc" 18 1167 "*int8"
V L "s1" 18 1167 "*int8"
V L "sd" 18 1167 "*int8"
V L "x" 18 1168 "sint16"
V L "sign" 18 1169 "int8"
V L "digits" 18 1170 "int8[1]"
C L "strtol" 18 397 1 "FUNCTION"
C L "strtol" 18 397 1 "FUNCTION"
C L "strtol" 18 397 1 "FUNCTION"
V L "string" 18 1228 "*int8"
F G "system" 18 1228 "sint8(*int8 string,int16 n)"
V L "s" 18 1233 "*int8"
V L "n" 18 1233 "int16"
F G "mblen" 18 1233 "int8(*int8 s,int16 n)"
V L "pwc" 18 1238 "*int8"
V L "s" 18 1238 "*int8"
V L "n" 18 1238 "int16"
F G "mbtowc" 18 1238 "int8(*int8 pwc,*int8 s,int16 n)"
V L "s" 18 1244 "*int8"
V L "wchar" 18 1244 "int8"
F G "wctomb" 18 1244 "int8(*int8 s,int8 wchar)"
V L "pwcs" 18 1250 "*int8"
V L "s" 18 1250 "*int8"
V L "n" 18 1250 "int16"
F G "mbstowcs" 18 1250 "int16(*int8 pwcs,*int8 s,int16 n)"
V L "s" 18 1256 "*int8"
V L "pwcs" 18 1256 "*int8"
V L "n" 18 1256 "int16"
F G "wcstombs" 18 1256 "int16(*int8 s,*int8 pwcs,int16 n)"
V G "_Randseed" 18 1266 "int32"
F G "rand" 18 1268 "int16(int16 ,int16 )"
V L "seed" 18 1274 "int32"
F G "srand" 18 1274 "void(int32 seed,*int8 p2)"
V L "p1" 18 1284 "*int8"
V L "p2" 18 1284 "*int8"
T G "*_Cmpfun" 18 1284 "sint8(*int8 p1,*int8 p2)"
V L "qdata" 18 1291 "*int8"
V L "qitems" 18 1291 "int8"
V L "qsize" 18 1291 "int8"
V L "cmp" 18 1291 "_Cmpfun"
F G "qsort" 18 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)"
V L "m" 18 1292 "int8"
V L "j" 18 1292 "int8"
V L "i" 18 1292 "int8"
V L "l" 18 1292 "int8"
V L "done" 18 1293 "int1"
V L "t" 18 1294 "int8[16]"
V L "key" 18 1319 "*int8"
V L "base" 18 1319 "*int8"
V L "num" 18 1319 "int16"
V L "width" 18 1319 "int16"
V L "cmp" 18 1319 "_Cmpfun"
F G "bsearch" 18 1319 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)"
V L "p" 18 1321 "*int8"
V L "q" 18 1321 "*int8"
V L "n" 18 1322 "int16"
V L "pivot" 18 1323 "int16"
V L "val" 18 1324 "sint8"
C L "bsearch" 18 397 1 "FUNCTION"
D G "DISPLAY_CMD_PING" 21 3 "1"
D G "DISPLAY_CMD_SEND_VALUE" 21 4 "2"
D G "DISPLAY_CMD_SEND_TEXT" 21 5 "3"
D G "DISPLAY_CMD_UPDATE_SENSORS" 21 6 "4"
D G "DISPLAY_CMD_SEND_LONG_TEXT" 21 7 "5"
D G "DISPLAY_CMD_CLS" 21 8 "6"
D G "DISPLAY_CMD_GETPOS" 21 9 "7"
D G "DISPLAY_CMD_SETPOS" 21 10 "8"
F G "displayPing" 21 12 "int8()"
V L "val" 21 13 "int16"
F G "displayValue" 21 13 "void(int16 val)"
V L "ch1" 21 14 "int8"
V L "ch2" 21 14 "int8"
V L "ch3" 21 14 "int8"
V L "ch4" 21 14 "int8"
F G "displayText" 21 14 "void(int8 ch1,int8 ch2,int8 ch3,int8 ch4)"
V L "text" 21 15 "*int8"
F G "displayLongText" 21 15 "void(*int8 text)"
F G "displaySendSensors" 21 16 "void()"
F G "clearDisplay" 21 17 "void()"
F G "getDisplayPos" 21 18 "int8()"
V L "pos" 21 19 "int8"
F G "setDisplayPos" 21 19 "void(int8 pos)" "1 -> use the pi-topping builtin 7segment display"
C L "setDisplayPos" 21 1 1 "FUNCTION"
V G "gblUseOnBoard7Segment" 21 23 "int1"
F G "resetI2C" 22 1 "void()"
V L "slaveAddress" 22 2 "int8"
V L "registerAddress" 22 2 "int8"
V L "registerValue" 22 2 "int8"
F G "i2cWrite" 22 2 "int8(int8 slaveAddress,int8 registerAddress,int8 registerValue)"
V L "slaveAddress" 22 3 "int8"
V L "registerAddress" 22 3 "int8"
V L "registerValue" 22 3 "*int8"
F G "i2cRead" 22 3 "int8(int8 slaveAddress,int8 registerAddress,*int8 registerValue)"
V L "binary_value" 23 1 "int8"
F G "bin2bcd" 23 1 "int8(int8 binary_value)"
V L "bcd_value" 23 2 "int8"
F G "bcd2bin" 23 2 "int8(int8 bcd_value)"
F G "rtcInit" 23 3 "void()"
V L "itemNumber" 23 4 "int8"
F G "rtcGetItem" 23 4 "int8(int8 itemNumber)"
V L "itemNumber" 23 5 "int8"
V L "itemValue" 23 5 "int8"
F G "rtcSetItem" 23 5 "void(int8 itemNumber,int8 itemValue)"
D G "EN_DIGIT1" 24 1 "PIN_F7"
D G "EN_DIGIT2" 24 2 "PIN_E3"
D G "EN_DIGIT3" 24 3 "PIN_E4"
D G "EN_DIGIT4" 24 4 "PIN_E0"
D G "SEG_A" 24 6 "PIN_E1"
D G "SEG_B" 24 7 "PIN_E2"
D G "SEG_C" 24 8 "PIN_G3"
D G "SEG_D" 24 9 "PIN_G1"
D G "SEG_E" 24 10 "PIN_G0"
D G "SEG_F" 24 11 "PIN_E5"
D G "SEG_G" 24 12 "PIN_G4"
D G "SEG_DP" 24 13 "PIN_G2"
F G "showNextDigit" 24 15 "void()"
F G "turnOffAllSegments" 24 16 "void()"
V L "inChar" 24 17 "int8"
F G "Char2Segments" 24 17 "int8(int8 inChar)"
F G "cls_internal7Seg" 24 18 "void()"
V L "ch1" 24 19 "int8"
V L "ch2" 24 19 "int8"
V L "ch3" 24 19 "int8"
V L "ch4" 24 19 "int8"
F G "showOnBuiltIn7Segment" 24 19 "void(int8 ch1,int8 ch2,int8 ch3,int8 ch4)"
V G "gblDisplayDigit" 24 21 "int8"
C L "showOnBuiltIn7Segment" 24 23 4 "FUNCTION"
V G "gblCharCodeToShow1" 24 28 "int8"
C L "showOnBuiltIn7Segment" 24 23 1 "FUNCTION"
V G "gblCharCodeToShow2" 24 29 "int8"
C L "showOnBuiltIn7Segment" 24 23 1 "FUNCTION"
V G "gblCharCodeToShow3" 24 30 "int8"
C L "showOnBuiltIn7Segment" 24 23 1 "FUNCTION"
V G "gblCharCodeToShow4" 24 31 "int8"
D G "HARDWARE_ID1" 0 68 "0x01" "02 = Pi-Topping Board (for the Raspberry Pi)"
D G "HARDWARE_ID2" 0 69 "0x10" "10 = version 1.0"
D G "FIRMWARE_ID" 0 70 "1" "Firmware version"
D G "defaultPort" 0 74 "0"
D G "channelSwitchDelay" 0 76 "100" "delay time in us after switching adc channels"
D G "T0_COUNTER" 0 90 "56161" "at 48Mhz, and prescale=128 the interrupt period is"
D G "PWM_PERIOD" 0 92 "27135" "65535-38400. Used in Timer1, which gives a 25.6 ms period"
D G "CMD_TIMEOUT_PERIOD" 0 96 "4" "determins how long befor the board will reset"
D G "RESERVED_MEMORY_START" 0 101 "0x5800" "must be a multiple of getenv("FLASH_ERASE_SIZE"), which is 1024 in the pic18F66J50"
D G "RESERVED_MEMORY_END" 0 102 "0xFFF0"
C L "showOnBuiltIn7Segment" 0 77 5 "FUNCTION"
F G "reserved" 0 118 "void()"
C L "startStopLogoProcedures" 0 77 5 "FUNCTION"
F G "startStopLogoProcedures" 0 133 "void()"
F G "stopLogoProcedures" 0 134 "void()"
V L "Pin" 0 137 "int16"
F G "setHigh" 0 137 "void(int16 Pin)"
V L "Pin" 0 138 "int16"
F G "setLow" 0 138 "void(int16 Pin)"
V L "Pin" 0 139 "int16"
F G "readPin" 0 139 "int8(int16 Pin)"
V L "InByte" 0 141 "int8"
V L "BitNo" 0 141 "int8"
F G "getBit" 0 141 "int8(int8 InByte,int8 BitNo)"
V L "InByte" 0 142 "*int8"
V L "BitNo" 0 142 "int8"
F G "setBit" 0 142 "void(*int8 InByte,int8 BitNo)"
V L "InByte" 0 143 "*int8"
V L "BitNo" 0 143 "int8"
F G "clearBit" 0 143 "void(*int8 InByte,int8 BitNo)"
V L "Param" 0 145 "int8"
F G "Ping" 0 145 "void(int8 Param)"
V L "MotorBits" 0 146 "int8"
F G "TalkToMotor" 0 146 "void(int8 MotorBits)"
V L "MotorCmd" 0 147 "int8"
F G "MotorControl" 0 147 "void(int8 MotorCmd)"
V L "Power" 0 148 "int8"
F G "SetMotorPower" 0 148 "void(int8 Power)"
V L "delta" 0 149 "int8"
F G "ChangeMotorPower" 0 149 "void(int8 delta)"
F G "createPWMVectorTable" 0 150 "void()" "void sortMtrDuty();"
V L "motorMode" 0 152 "int8"
F G "SetMotorMode" 0 152 "void(int8 motorMode)" "normal or servo"
V L "groupNo" 0 154 "int8"
F G "ENHigh" 0 154 "void(int8 groupNo)"
V L "groupNo" 0 155 "int8"
F G "ENLow" 0 155 "void(int8 groupNo)"
V L "MotorNo" 0 157 "int8"
F G "MotorON" 0 157 "void(int8 MotorNo)"
V L "MotorNo" 0 158 "int8"
F G "MotorOFF" 0 158 "void(int8 MotorNo)"
V L "MotorNo" 0 159 "int8"
F G "MotorRD" 0 159 "void(int8 MotorNo)"
V L "MotorNo" 0 160 "int8"
F G "MotorThisWay" 0 160 "void(int8 MotorNo)"
V L "MotorNo" 0 161 "int8"
F G "MotorThatWay" 0 161 "void(int8 MotorNo)"
V L "MotorNo" 0 162 "int8"
F G "MotorCoast" 0 162 "void(int8 MotorNo)"
V L "cur_param" 0 163 "int8"
V L "cur_ext" 0 163 "int8"
V L "cur_ext_byte" 0 163 "int8"
F G "miscControl" 0 163 "void(int8 cur_param,int8 cur_ext,int8 cur_ext_byte)"
F G "beep" 0 165 "void()"
V L "SensorBits" 0 167 "int8"
V L "Mode" 0 167 "int8"
F G "SetBurstMode" 0 167 "void(int8 SensorBits,int8 Mode)"
F G "DoSensorStuff" 0 168 "void()" "this prints the result back to the PC"
C L "DoSensorStuff" 0 77 2 "FUNCTION"
V L "sensorNo" 0 172 "int8"
F G "readSensor" 0 172 "int16(int8 sensorNo)"
F G "getSensorVal" 0 173 "int16()"
V L "channelNo" 0 174 "int8"
F G "switchAdcChannel" 0 174 "void(int8 channelNo)"
F G "ProcessInput" 0 176 "void()"
F G "ProcessRFInput" 0 177 "void()" "int  process_input();"
C L "ProcessRFInput" 0 77 3 "FUNCTION"
F G "init_variables" 0 182 "void()"
F G "intro" 0 183 "void()"
F G "Halt" 0 184 "void()"
F G "initBoard" 0 185 "void()"
F G "DoDisplayModuleStuff" 0 187 "void()"
F G "DoMotorStuff" 0 188 "void()" "Flash memory routines"
V L "address" 0 194 "int16"
F G "FLASHSetWordAddress" 0 194 "void(int16 address)"
V L "InByte" 0 195 "int16"
F G "FLASHBufferedWrite" 0 195 "void(int16 InByte)"
F G "FLASHFlushBuffer" 0 196 "void()"
V L "??65535" 0 197 "int16"
F G "FLASHWrite" 0 197 "void(int16 )"
V L "memoryBlockAddress" 0 198 "int16"
V L "positionInMemoryBlock" 0 198 "int16"
V L "len" 0 198 "int16"
V L "Buffer" 0 198 "*int8"
F G "writeFLASH" 0 198 "void(int16 memoryBlockAddress,int16 positionInMemoryBlock,int16 len,*int8 Buffer)"
F G "timer2ISR" 0 201 "int8()" "Global Variables"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "MotorCWPins" 0 209 "int16[4]"
V G "MotorCCPins" 0 210 "int16[4]"
V G "CMD_STATE" 0 212 "int8"
V G "gbl_cur_cmd" 0 214 "int8"
V G "gbl_cur_param" 0 214 "int8"
V G "gbl_cur_ext" 0 214 "int8"
V G "gbl_cur_ext_byte" 0 214 "int8"
V G "gblExtCMDBuffer" 0 215 "int8[32]" "buffer to hold the gogo extended command stream"
V G "gblExtCmdMode" 0 216 "int1"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblExtCmdLen" 0 217 "int8"
V G "gblExtCmdBufferIndex" 0 218 "int8"
V G "gblSensorPortMap" 0 221 "int8[8]"
C L "timer2ISR" 0 77 2 "FUNCTION"
V G "gblBurstModeBits" 0 224 "int8"
V G "gblBurstModeCounter" 0 225 "int8"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblSlowBurstMode" 0 227 "int1"
C L "timer2ISR" 0 77 2 "FUNCTION"
V G "gblBurstModeTimerHasTicked" 0 230 "int1"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblCurSensorChannel" 0 231 "int8"
V G "gblMotorMode" 0 236 "int8"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblActiveMotors" 0 237 "int8"
V G "gblMotorDir" 0 238 "int8"
V G "gblMotorONOFF" 0 239 "int8"
V G "gblMtrDuty" 0 240 "int8[5]"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblMtrPrevDuty" 0 241 "int8[5]"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblMtrNeedToRecreateMtrDutyVector" 0 242 "int1"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblAtEndOfPWMCycle" 0 243 "int1"
C L "timer2ISR" 0 77 6 "FUNCTION"
V G "flgNeedToTurnOffAllMotors" 0 250 "int1"
C L "timer2ISR" 0 77 2 "FUNCTION"
V G "gblPWMVector" 0 255 "int16[4]"
V G "gblPWMVectorPorts" 0 256 "int8[4]"
V G "gblPWMVectorLen" 0 257 "int8"
V G "gblPWMTerminatingVector" 0 258 "int16"
V G "gblPWMVectorIndexCounter" 0 259 "int8"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblMostRecentlyReceivedByte" 0 265 "int8"
V G "gblNewByteHasArrivedFlag" 0 266 "int1"
V G "gblLogoIsRunning" 0 270 "int1"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblButtonPressed" 0 271 "int1"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblBtn1AlreadyPressed" 0 272 "int1"
V G "gblWaitCounter" 0 273 "int16"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblTimer" 0 276 "int16"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblCmdTimeOut" 0 278 "int8"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblSerialBuffer" 0 280 "int8[32]"
V G "gblSerialBufferPutIndex" 0 281 "int8"
V G "gblSerialBufferGetIndex" 0 282 "int8"
V G "gblSerialBufferIsFull" 0 283 "int8"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblTimeToProbeDisplayModule" 0 289 "int8"
V G "gblDisplayPresent" 0 290 "int1"
V G "gblTimeToSendSensorValues" 0 291 "int8"
V G "gblDisplayAddress" 0 292 "int8"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblDisplayAddressList" 0 293 "int8[4]"
C L "timer2ISR" 0 77 5 "FUNCTION"
V G "gblAutoDetectDisplays" 0 298 "int1"
C L "timer2ISR" 0 77 4 "FUNCTION"
V G "gblI2CisBusy" 0 303 "int1"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblIRCode" 0 309 "int16"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblIRCodeTemp" 0 310 "int16"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblCCP2_FE" 0 311 "int1"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblREPulseTimeStamp" 0 312 "int16"
V G "gblIRPulseCount" 0 313 "int8"
C L "timer2ISR" 0 77 2 "FUNCTION"
V G "gblIRActivity" 0 315 "int1"
C L "timer2ISR" 0 77 3 "FUNCTION"
V G "gblPrevIR" 0 318 "int16" "records the prev IR code"
V G "IRThreashold" 0 319 "int8"
V G "gblNewIRCodeHasArrivedFlag" 0 320 "int1"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblNeedToBeep" 0 322 "int1"
C L "timer2ISR" 0 77 2 "FUNCTION"
V G "gblPauseI2CActivity" 0 324 "int1"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblFlashBuffer" 0 328 "int8[64]" "buffer for flash write operations"
V G "gblFlashOffsetIndex" 0 329 "int16"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblFlashBaseAddress" 0 330 "int16" "where the flash buffer shuld be written to in the flash mem"
V G "gblFlashBufferCounter" 0 331 "int16"
C L "timer2ISR" 0 77 1 "FUNCTION"
V G "gblCommChannel" 0 334 "int8"
C L "timer2ISR" 0 77 1 "FUNCTION"
F G "serial_isr" 0 346 "void()"
F G "rtccISR" 0 368 "void()"
C L "rtccISR" 0 77 1 "FUNCTION"
C L "rtccISR" 0 77 3 "FUNCTION"
C L "rtccISR" 0 77 1 "FUNCTION"
C L "rtccISR" 0 77 2 "FUNCTION"
C L "rtccISR" 0 77 2 "FUNCTION"
C L "rtccISR" 0 77 1 "FUNCTION"
C L "rtccISR" 0 77 1 "FUNCTION"
C L "rtccISR" 0 77 1 "FUNCTION"
C L "timer1ISR" 0 77 1 "FUNCTION"
F G "timer1ISR" 0 415 "void()"
V L "associatedPorts" 0 417 "int8"
V L "i" 0 418 "int8" "If this interrupt has taken place at the end of a PWM pulse. Thus, we need"
C L "timer1ISR" 0 77 1 "FUNCTION"
C L "timer1ISR" 0 77 1 "FUNCTION"
C L "timer1ISR" 0 77 1 "FUNCTION"
C L "timer1ISR" 0 77 1 "FUNCTION"
C L "timer1ISR" 0 77 4 "FUNCTION"
C L "timer1ISR" 0 77 2 "FUNCTION"
C L "timer1ISR" 0 77 1 "FUNCTION"
C L "timer1ISR" 0 77 1 "FUNCTION"
C L "timer1ISR" 0 77 1 "FUNCTION"
C L "timer1ISR" 0 77 1 "FUNCTION"
C L "timer1ISR" 0 77 1 "FUNCTION"
C L "timer1ISR" 0 77 3 "FUNCTION"
C L "timer1ISR" 0 77 1 "FUNCTION"
C L "timer1ISR" 0 77 1 "FUNCTION"
C L "timer1ISR" 0 77 1 "FUNCTION"
C L "timer1ISR" 0 77 1 "FUNCTION"
C L "timer2ISR" 0 77 1 "FUNCTION"
F G "timer2ISR" 0 527 "void()"
C L "timer2ISR" 0 77 1 "FUNCTION"
C L "timer2ISR" 0 77 1 "FUNCTION"
C L "timer3ISR" 0 77 1 "FUNCTION"
F G "timer3ISR" 0 538 "void()" "if no IR Activity in the past timer3 period -> assume IR data is done"
C L "timer3ISR" 0 77 1 "FUNCTION"
C L "timer3ISR" 0 77 1 "FUNCTION"
C L "timer3ISR" 0 77 3 "FUNCTION"
C L "timer3ISR" 0 77 1 "FUNCTION"
C L "timer3ISR" 0 77 1 "FUNCTION"
C L "timer3ISR" 0 77 1 "FUNCTION"
F G "ccp2_isr" 0 575 "void()" "Captures IR pulses"
C L "ccp2_isr" 0 77 7 "FUNCTION"
V L "pulseWidth" 0 591 "int16"
C L "ccp2_isr" 0 77 5 "FUNCTION"
C L "ccp2_isr" 0 77 2 "FUNCTION"
C L "ccp2_isr" 0 77 1 "FUNCTION"
C L "ccp2_isr" 0 77 1 "FUNCTION"
C L "ccp2_isr" 0 77 1 "FUNCTION"
C L "ccp2_isr" 0 77 1 "FUNCTION"
C L "ccp2_isr" 0 77 4 "FUNCTION"
C L "ccp2_isr" 0 77 4 "FUNCTION"
C L "ccp2_isr" 0 77 1 "FUNCTION"
C L "stopLogoProcedures" 0 77 3 "FUNCTION"
F G "stopLogoProcedures" 0 661 "void(int8 ,int8 ,int16 )" "output_toggle(USER_LED);"
C L "stopLogoProcedures" 0 77 1 "FUNCTION"
C L "stopLogoProcedures" 0 77 2 "FUNCTION"
C L "stopLogoProcedures" 0 77 1 "FUNCTION"
C L "stopLogoProcedures" 0 77 1 "FUNCTION"
C L "stopLogoProcedures" 0 77 1 "FUNCTION"
F G "startStopLogoProcedures" 0 679 "void(int8 ,int8 ,int16 )"
C L "startStopLogoProcedures" 0 77 2 "FUNCTION"
C L "startStopLogoProcedures" 0 77 2 "FUNCTION"
C L "startStopLogoProcedures" 0 77 3 "FUNCTION"
C L "startStopLogoProcedures" 0 77 6 "FUNCTION"
C L "startStopLogoProcedures" 0 77 1 "FUNCTION"
C L "startStopLogoProcedures" 0 77 1 "FUNCTION"
V L "Pin" 0 723 "int16"
F G "setLow" 0 723 "void(int16 Pin,int8 ,int16 )" "*(Pin>>3) &= (~(1<<(Pin&7)));"
V L "Pin" 0 729 "int16"
F G "setHigh" 0 729 "void(int16 Pin,int16 )" "*(Pin>>3) |= (1<<(Pin&7));"
V L "Pin" 0 737 "int16"
F G "readPin" 0 737 "int8(int16 Pin,int16 )" "return (*(Pin>>3) & (1<<(Pin&7))) ;"
V L "InByte" 0 747 "int8"
V L "BitNo" 0 747 "int8"
F G "getBit" 0 747 "int8(int8 InByte,int8 BitNo)"
V L "InByte" 0 751 "*int8"
V L "BitNo" 0 751 "int8"
F G "setBit" 0 751 "void(*int8 InByte,int8 BitNo)"
V L "InByte" 0 755 "*int8"
V L "BitNo" 0 755 "int8"
F G "clearBit" 0 755 "void(*int8 InByte,int8 BitNo)"
V L "c" 0 760 "int8"
F G "active_comm_putc" 0 760 "void(int8 c,int8 BitNo)"
C L "TalkToMotor" 0 77 1 "FUNCTION"
V L "MotorBits" 0 774 "int8"
F G "TalkToMotor" 0 774 "void(int8 MotorBits)" "Each bit represents one motor. i.e 0b00010010 means motor 2 and 5 are active"
C L "TalkToMotor" 0 77 1 "FUNCTION"
V L "MotorCmd" 0 785 "int8"
F G "MotorControl" 0 785 "void(int8 MotorCmd)"
V L "i" 0 787 "int8"
C L "SetMotorPower" 0 77 2 "FUNCTION"
V L "Power" 0 820 "int8"
F G "SetMotorPower" 0 820 "void(int8 Power)"
V L "i" 0 822 "int8"
C L "SetMotorPower" 0 77 7 "FUNCTION"
C L "SetMotorPower" 0 77 1 "FUNCTION"
C L "SetMotorPower" 0 77 2 "FUNCTION"
V L "delta" 0 860 "int8"
F G "ChangeMotorPower" 0 860 "void(int8 delta)"
V L "i" 0 861 "int8"
C L "createPWMVectorTable" 0 77 13 "FUNCTION"
C L "createPWMVectorTable" 0 893 2 "*"
C L "createPWMVectorTable" 0 895 2 "*"
C L "createPWMVectorTable" 0 897 1 "*"
C L "createPWMVectorTable" 0 898 3 "*"
C L "createPWMVectorTable" 0 903 1 "*"
C L "createPWMVectorTable" 0 904 1 "*"
C L "createPWMVectorTable" 0 905 4 "*"
F G "createPWMVectorTable" 0 912 "void()"
V L "portsProcessed" 0 914 "int8"
C L "createPWMVectorTable" 0 905 1 "FUNCTION"
V L "i" 0 915 "int8"
V L "vectorIndex" 0 916 "int8"
C L "createPWMVectorTable" 0 905 1 "FUNCTION"
V L "currentPowerLevel" 0 917 "int8" "buffer to cache an array value (just to make exe faster)"
V L "currentMinLevel" 0 918 "int8"
C L "createPWMVectorTable" 0 905 1 "FUNCTION"
V L "portList" 0 919 "int8"
C L "createPWMVectorTable" 0 905 1 "FUNCTION"
V L "prevMinLevel" 0 920 "int8"
C L "createPWMVectorTable" 0 905 1 "FUNCTION"
C L "createPWMVectorTable" 0 905 2 "FUNCTION"
C L "createPWMVectorTable" 0 905 1 "FUNCTION"
C L "createPWMVectorTable" 0 905 1 "FUNCTION"
C L "createPWMVectorTable" 0 905 1 "FUNCTION"
C L "createPWMVectorTable" 0 905 1 "FUNCTION"
C L "createPWMVectorTable" 0 905 2 "FUNCTION"
C L "createPWMVectorTable" 0 905 1 "FUNCTION"
C L "createPWMVectorTable" 0 905 2 "FUNCTION"
C L "createPWMVectorTable" 0 905 1 "FUNCTION"
C L "createPWMVectorTable" 0 905 1 "FUNCTION"
C L "createPWMVectorTable" 0 905 1 "FUNCTION"
C L "createPWMVectorTable" 0 905 1 "FUNCTION"
C L "createPWMVectorTable" 0 905 1 "FUNCTION"
C L "createPWMVectorTable" 0 905 2 "FUNCTION"
C L "SetMotorMode" 0 905 1 "FUNCTION"
V L "motorMode" 0 988 "int8"
F G "SetMotorMode" 0 988 "void(int8 motorMode)"
V L "i" 0 989 "int8"
C L "SetMotorMode" 0 905 1 "FUNCTION"
C L "ENHigh" 0 905 1 "FUNCTION"
V L "groupNo" 0 1003 "int8"
F G "ENHigh" 0 1003 "void(int8 groupNo)"
C L "ENHigh" 0 905 3 "FUNCTION"
C L "ENLow" 0 905 3 "FUNCTION"
V L "groupNo" 0 1024 "int8"
F G "ENLow" 0 1024 "void(int8 groupNo)"
C L "ENLow" 0 905 3 "FUNCTION"
V L "MotorNo" 0 1042 "int8"
F G "MotorON" 0 1042 "void(int8 MotorNo)" "no need to directly output to pins here. the PWM routine in Timer1"
C L "MotorON" 0 905 19 "FUNCTION"
V L "MotorNo" 0 1078 "int8"
F G "MotorOFF" 0 1078 "void(int8 MotorNo)"
V L "MtrCC" 0 1081 "int16"
V L "MtrCW" 0 1081 "int16"
C L "MotorOFF" 0 905 1 "FUNCTION"
V L "MotorNo" 0 1097 "int8"
F G "MotorRD" 0 1097 "void(int8 MotorNo)" "no need to directly output to pins here. the PWM routine in Timer1"
C L "MotorRD" 0 905 18 "FUNCTION"
V L "MotorNo" 0 1136 "int8"
F G "MotorThisWay" 0 1136 "void(int8 MotorNo)" "no need to directly output to pins here. the PWM routine in Timer1"
C L "MotorThisWay" 0 905 10 "FUNCTION"
V L "MotorNo" 0 1160 "int8"
F G "MotorThatWay" 0 1160 "void(int8 MotorNo)" "no need to directly output to pins here. the PWM routine in Timer1"
C L "MotorThatWay" 0 905 10 "FUNCTION"
V L "MotorNo" 0 1183 "int8"
F G "MotorCoast" 0 1183 "void(int8 MotorNo)" "no need to directly output to pins here. the PWM routine in Timer1"
C L "MotorCoast" 0 905 8 "FUNCTION"
C L "MotorCoast" 0 905 2 "FUNCTION"
F G "DoMotorStuff" 0 1211 "void(int8 MotorNo)" "Update the motor duty vector if needed."
C L "DoMotorStuff" 0 905 2 "FUNCTION"
C L "miscControl" 0 905 1 "FUNCTION"
V L "cur_param" 0 1235 "int8"
V L "cur_ext" 0 1235 "int8"
V L "cur_ext_byte" 0 1235 "int8"
F G "miscControl" 0 1235 "void(int8 cur_param,int8 cur_ext,int8 cur_ext_byte)" "int16 counter;"
C L "miscControl" 0 905 1 "FUNCTION"
C L "miscControl" 0 905 1 "FUNCTION"
C L "miscControl" 0 905 1 "FUNCTION"
C L "miscControl" 0 905 1 "FUNCTION"
C L "uLED_on" 0 905 1 "FUNCTION"
F G "uLED_on" 0 1298 "void(int8 cur_ext_byte)"
F G "uLED_off" 0 1302 "void()"
C L "beep" 0 905 1 "FUNCTION"
F G "beep" 0 1310 "void()"
C L "beep" 0 905 1 "FUNCTION"
C L "beep" 0 905 1 "FUNCTION"
C L "DoSensorStuff" 0 905 1 "FUNCTION"
F G "DoSensorStuff" 0 1327 "void()" "int i;"
V L "SensorVal" 0 1330 "int16" "Burst sensor data to computer"
C L "DoSensorStuff" 0 905 1 "FUNCTION"
C L "DoSensorStuff" 0 905 1 "FUNCTION"
C L "SetBurstMode" 0 905 1 "FUNCTION"
V L "SensorBits" 0 1365 "int8"
V L "Mode" 0 1365 "int8"
F G "SetBurstMode" 0 1365 "void(int8 SensorBits,int8 Mode)"
C L "SetBurstMode" 0 905 2 "FUNCTION"
C L "SetBurstMode" 0 905 1 "FUNCTION"
C L "SetBurstMode" 0 905 1 "FUNCTION"
V L "sensorNo" 0 1381 "int8"
F G "readSensor" 0 1381 "int16(int8 sensorNo,int8 Mode)"
F G "getSensorVal" 0 1392 "int16(int8 sensorNo,int8 Mode)"
V L "sensorVal" 0 1394 "int16"
C L "getSensorVal" 0 905 4 "FUNCTION"
C L "getSensorVal" 0 905 6 "FUNCTION"
C L "getSensorVal" 0 905 1 "FUNCTION"
V L "channelNo" 0 1417 "int8"
F G "switchAdcChannel" 0 1417 "void(int8 channelNo)"
C L "readSerialBuffer" 0 905 1 "FUNCTION"
V L "charPtr" 0 1428 "*int8"
F G "readSerialBuffer" 0 1428 "int8(*int8 charPtr)"
V L "errorCode" 0 1430 "int8"
F G "serialKbhit" 0 1458 "int8()"
F G "serialGetChar" 0 1462 "int8()"
V L "foo" 0 1463 "int8"
C L "DoDisplayModuleStuff" 0 905 1 "FUNCTION"
F G "DoDisplayModuleStuff" 0 1479 "void()" "if i2c is being used"
C L "DoDisplayModuleStuff" 0 905 1 "FUNCTION"
C L "DoDisplayModuleStuff" 0 905 2 "FUNCTION"
C L "DoDisplayModuleStuff" 0 905 1 "FUNCTION"
C L "DoDisplayModuleStuff" 0 905 3 "FUNCTION"
C L "init_variables" 0 905 1 "FUNCTION"
F G "init_variables" 0 1514 "void()"
C L "init_variables" 0 905 1 "FUNCTION"
C L "init_variables" 0 905 2 "FUNCTION"
C L "init_variables" 0 905 1 "FUNCTION"
C L "init_variables" 0 905 1 "FUNCTION"
C L "init_variables" 0 905 3 "FUNCTION"
F G "intro" 0 1542 "void()"
C L "intro" 0 905 1 "FUNCTION"
C L "intro" 0 905 1 "FUNCTION"
C L "intro" 0 905 1 "FUNCTION"
C L "intro" 0 905 1 "FUNCTION"
F G "Halt" 0 1566 "void()"
F G "clearMotors" 0 1577 "void()"
V L "i" 0 1579 "int8"
V L "j" 0 1579 "int8" "Disable both motor chips"
C L "clearMotors" 0 905 1 "FUNCTION"
C L "clearMotors" 0 905 1 "FUNCTION"
C L "clearMotors" 0 905 1 "FUNCTION"
C L "clearMotors" 0 905 1 "FUNCTION"
F G "initBoard" 0 1596 "void()"
V L "i" 0 1598 "int8"
V L "j" 0 1598 "int8"
C L "initBoard" 0 905 1 "FUNCTION"
C L "initBoard" 0 905 1 "FUNCTION"
C L "initBoard" 0 905 2 "FUNCTION"
C L "initBoard" 0 905 3 "FUNCTION"
C L "initBoard" 0 905 1 "FUNCTION"
C L "initBoard" 0 905 1 "FUNCTION"
C L "initBoard" 0 905 1 "FUNCTION"
C L "initBoard" 0 905 1 "FUNCTION"
C L "initBoard" 0 905 3 "FUNCTION"
C L "initBoard" 0 905 1 "FUNCTION"
C L "initBoard" 0 905 6 "FUNCTION"
C L "FLASHSetWordAddress" 0 905 1 "FUNCTION"
V L "address" 0 1691 "int16"
F G "FLASHSetWordAddress" 0 1691 "void(int16 address)" "calculate the address of the beginning of the current flash block"
C L "FLASHSetWordAddress" 0 905 2 "FUNCTION"
C L "FLASHSetWordAddress" 0 905 1 "FUNCTION"
C L "FLASHSetWordAddress" 0 905 1 "FUNCTION"
V L "InByte" 0 1706 "int16"
F G "FLASHBufferedWrite" 0 1706 "void(int16 InByte)"
C L "FLASHBufferedWrite" 0 905 2 "FUNCTION"
C L "FLASHWrite" 0 905 1 "FUNCTION"
V L "InByte" 0 1720 "int16"
F G "FLASHWrite" 0 1720 "void(int16 InByte)"
F G "FLASHFlushBuffer" 0 1728 "void(int16 InByte)"
C L "writeFLASH" 0 905 7 "FUNCTION"
V L "memoryBlockAddress" 0 1749 "int16"
V L "positionInMemoryBlock" 0 1749 "int16"
V L "len" 0 1749 "int16"
V L "Buffer" 0 1749 "*int8"
F G "writeFLASH" 0 1749 "void(int16 memoryBlockAddress,int16 positionInMemoryBlock,int16 len,*int8 Buffer)"
V L "writeBuffer" 0 1751 "int8[1024]"
V L "i" 0 1752 "int16"
V L "counter" 0 1752 "int16"
V L "writeLenInThisBlock" 0 1753 "int16"
V L "notDone" 0 1754 "int1"
C L "writeFLASH" 0 905 1 "FUNCTION"
C L "writeFLASH" 0 905 1 "FUNCTION"
C L "writeFLASH" 0 905 1 "FUNCTION"
C L "writeFLASH" 0 905 1 "FUNCTION"
C L "writeFLASH" 0 905 1 "FUNCTION"
C L "writeFLASH" 0 905 2 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
F G "ProcessInput" 0 1817 "void()"
V L "InByte" 0 1818 "int8"
V L "doNotStopRunningProcedure" 0 1819 "int1"
C L "ProcessInput" 0 905 1 "FUNCTION"
V L "i" 0 1820 "int8" "while ((buff_status = readSerialBuffer(&InByte)) == SERIAL_SUCCESS)  // fetch character"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 3 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 2 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 3 "FUNCTION"
C L "ProcessInput" 0 905 2 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 3 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 2 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 2 "FUNCTION"
C L "ProcessInput" 0 905 3 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 5 "FUNCTION"
C L "ProcessInput" 0 905 4 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 6 "FUNCTION"
C L "ProcessInput" 0 905 3 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "ProcessInput" 0 905 2 "FUNCTION"
C L "ProcessInput" 0 905 1 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
F G "main" 0 2135 "void()"
V L "SensorVal" 0 2138 "int16"
V L "uploadLen" 0 2139 "int16"
V L "counter" 0 2139 "int16"
V L "foo" 0 2142 "int16"
V L "i" 0 2144 "int8"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 6 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 2 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 5 "FUNCTION"
C L "main" 0 905 4 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 2 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 2 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "main" 0 905 2 "FUNCTION"
C L "main" 0 905 2 "FUNCTION"
C L "main" 0 905 3 "FUNCTION"
C L "main" 0 905 1 "FUNCTION"
C L "evalOpcode" 25 2 22 "FUNCTION"
C L "evalOpcode" 26 2 22 "FUNCTION"
V L "opcode" 26 41 "int8"
F G "evalOpcode" 26 41 "void(int8 opcode)"
V L "i" 26 43 "int8"
V L "opr1" 26 44 "int16"
V L "opr2" 26 44 "int16"
V L "opr3" 26 44 "int16"
V L "genPurpose" 26 45 "int16"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 2 "FUNCTION"
C L "evalOpcode" 26 2 2 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 4 "FUNCTION"
C L "evalOpcode" 26 2 2 "FUNCTION"
C L "evalOpcode" 26 2 2 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 7 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 3 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 4 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 4 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 2 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 2 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 3 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 2 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 3 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 3 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 1 "FUNCTION"
C L "evalOpcode" 26 2 2 "FUNCTION"
V L "opcode" 26 507 "int8"
F G "evalOpcode2" 26 507 "void(int8 opcode)"
V L "i" 26 509 "int8"
V L "opr1" 26 510 "int16"
V L "opr2" 26 510 "int16"
V L "opr3" 26 510 "int16"
V L "genPurpose" 26 511 "int16"
V L "strPtr" 26 512 "*int8" "used with the show long string command"
V L "strLen" 26 513 "int8" "used with the show long string command"
V L "displayModuleBuffer" 26 514 "int8[33]" "16x2 LCD display buffer. The 33 location is for the null terminating char"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 3 "FUNCTION"
C L "evalOpcode2" 26 2 2 "FUNCTION"
C L "evalOpcode2" 26 2 3 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 2 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 2 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 2 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 2 "FUNCTION"
C L "evalOpcode2" 26 2 2 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 2 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 5 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 2 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 5 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "evalOpcode2" 26 2 1 "FUNCTION"
C L "stkPush" 27 2 14 "FUNCTION"
V L "stackItem" 27 29 "int16"
F G "stkPush" 27 29 "void(int16 stackItem)"
C L "stkPush" 27 2 1 "FUNCTION"
C L "stkPush" 27 2 2 "FUNCTION"
C L "stkPush" 27 2 1 "FUNCTION"
F G "stkPop" 27 48 "int16(int16 stackItem)"
C L "stkPop" 27 2 2 "FUNCTION"
C L "inputPush" 27 2 1 "FUNCTION"
V L "stackItem" 27 70 "int16"
F G "inputPush" 27 70 "void(int16 stackItem)"
C L "inputPush" 27 2 1 "FUNCTION"
C L "inputPush" 27 2 2 "FUNCTION"
C L "inputPush" 27 2 1 "FUNCTION"
F G "inputPop" 27 91 "int16(int16 stackItem)"
C L "inputPop" 27 2 1 "FUNCTION"
C L "inputPop" 27 2 3 "FUNCTION"
F G "clearStack" 27 112 "void(int16 stackItem)"
C L "sendBytes" 27 2 39 "FUNCTION"
V L "memPtr" 25 46 "int16"
V L "count" 25 46 "int16"
F G "sendBytes" 25 46 "void(int16 memPtr,int16 count)"
F G "fetchNextOpcode" 25 60 "int8(int16 count)"
V L "opcode" 25 63 "int16" "if an ONFOR command was launched we must turn motor off before"
C L "fetchNextOpcode" 25 66 2 "FUNCTION"
C L "fetchNextOpcode" 25 66 1 "FUNCTION"
C L "displayPing" 28 2 13 "FUNCTION"
F G "displayPing" 28 23 "int8()"
V L "inbyte" 28 24 "int8"
V L "found" 28 25 "int8"
V L "i" 28 26 "int8"
V L "currentAddress" 28 27 "int8"
V L "displayAddress" 28 28 "int8"
C L "displayPing" 28 2 1 "FUNCTION"
C L "displayPing" 28 2 1 "FUNCTION"
C L "displayPing" 28 2 1 "FUNCTION"
C L "displayPing" 28 2 3 "FUNCTION"
C L "displayPing" 28 2 1 "FUNCTION"
C L "displayPing" 28 2 1 "FUNCTION"
C L "displayPing" 28 2 1 "FUNCTION"
C L "displayPing" 28 2 2 "FUNCTION"
V L "val" 28 62 "int16"
F G "displayValue" 28 62 "void(int16 val)"
V L "temp" 28 64 "int8" "show on external 7-segment"
C L "displayValue" 28 2 3 "FUNCTION"
C L "displayValue" 28 2 1 "FUNCTION"
C L "displayValue" 28 2 1 "FUNCTION"
C L "displayValue" 28 2 1 "FUNCTION"
C L "displayValue" 28 2 1 "FUNCTION"
C L "displayValue" 28 2 2 "FUNCTION"
C L "displayValue" 28 2 1 "FUNCTION"
C L "displayValue" 28 2 1 "FUNCTION"
C L "displayValue" 28 2 1 "FUNCTION"
V L "ch1" 28 116 "int8"
V L "ch2" 28 116 "int8"
V L "ch3" 28 116 "int8"
V L "ch4" 28 116 "int8"
F G "displayText" 28 116 "void(int8 ch1,int8 ch2,int8 ch3,int8 ch4)" "show on external 7-segment"
C L "displayText" 28 2 3 "FUNCTION"
C L "displayText" 28 2 1 "FUNCTION"
C L "displayText" 28 2 1 "FUNCTION"
V L "text" 28 145 "*int8"
F G "displayLongText" 28 145 "void(*int8 text,int8 ch2,int8 ch3,int8 ch4)"
V L "i" 28 147 "sint8"
C L "displayLongText" 28 2 1 "FUNCTION"
C L "displayLongText" 28 2 3 "FUNCTION"
C L "displayLongText" 28 2 1 "FUNCTION"
C L "displayLongText" 28 2 1 "FUNCTION"
C L "displayLongText" 28 2 1 "FUNCTION"
V G "gblDisplaySensorCounter" 28 176 "int8"
C L "displaySendSensors" 28 2 1 "FUNCTION"
F G "displaySendSensors" 28 178 "void(int8 ch3,int8 ch4)"
V L "curVal" 28 180 "int16"
V L "temp" 28 181 "int8" "/disable_interrupts(GLOBAL);"
C L "displaySendSensors" 28 2 4 "FUNCTION"
C L "displaySendSensors" 28 2 1 "FUNCTION"
C L "displaySendSensors" 28 2 1 "FUNCTION"
C L "displaySendSensors" 28 2 1 "FUNCTION"
C L "displaySendSensors" 28 2 1 "FUNCTION"
C L "displaySendSensors" 28 2 1 "FUNCTION"
C L "clearDisplay" 28 2 1 "FUNCTION"
F G "clearDisplay" 28 219 "void()" "/disable_interrupts(GLOBAL);"
C L "clearDisplay" 28 2 1 "FUNCTION"
F G "getDisplayPos" 28 228 "int8()"
V L "pos" 28 229 "int8"
C L "getDisplayPos" 28 2 1 "FUNCTION"
C L "getDisplayPos" 28 2 1 "FUNCTION"
V L "pos" 28 241 "int8"
F G "setDisplayPos" 28 241 "void(int8 pos)" "/disable_interrupts(GLOBAL);"
C L "setDisplayPos" 28 2 1 "FUNCTION"
C L "a2i" 29 5 10 "FUNCTION"
V L "asciiByte" 29 23 "int8"
F G "a2i" 29 23 "int8(int8 asciiByte)"
C L "read8" 29 5 1 "FUNCTION"
F G "read8" 29 33 "int8(int8 asciiByte)"
C L "writeFlash" 29 5 7 "FUNCTION"
V L "memoryBlockAddress" 29 48 "int16"
V L "positionInMemoryBlock" 29 48 "int16"
V L "len" 29 48 "int16"
V L "Buffer" 29 48 "*int8"
F G "writeFlash" 29 48 "void(int16 memoryBlockAddress,int16 positionInMemoryBlock,int16 len,*int8 Buffer)"
V L "writeBuffer" 29 50 "int8[1024]"
V L "i" 29 51 "int16"
V L "counter" 29 51 "int16"
V L "writeLenInThisBlock" 29 52 "int16"
V L "notDone" 29 53 "int1"
C L "writeFlash" 29 5 1 "FUNCTION"
C L "writeFlash" 29 5 1 "FUNCTION"
C L "writeFlash" 29 5 1 "FUNCTION"
C L "writeFlash" 29 5 1 "FUNCTION"
C L "writeFlash" 29 5 2 "FUNCTION"
V L "targetByte" 29 101 "int8"
F G "waitFor" 29 101 "int8(int8 targetByte)"
V L "tollerance" 29 102 "int8"
C L "waitFor" 29 5 1 "FUNCTION"
C L "waitFor" 29 5 2 "FUNCTION"
C L "downloadBootloader" 29 5 4 "FUNCTION"
F G "downloadBootloader" 29 133 "void()"
V L "Buffer" 29 135 "int8[16]" "serial input buffer"
V L "notDone" 29 137 "int1"
V L "recLen" 29 139 "int8" "HEX file record length"
V L "writeAddr" 29 140 "int16" "HEX file write address"
V L "recType" 29 141 "int8" "HEX file record type"
V L "i" 29 143 "int8"
V L "j" 29 143 "int8" "general counters"
C L "downloadBootloader" 29 5 1 "FUNCTION"
V L "positionInMemoryBlock" 29 145 "int8"
V L "memoryBlockAddress" 29 146 "int16"
V L "bufferIndex" 29 147 "int8"
V L "writeLen" 29 148 "int8"
V L "BankAddress" 29 150 "int16"
V L "skipWriting" 29 151 "int1"
V L "relocateCount" 29 153 "int8"
D G "REC_SIZE" 29 154 "0x10"
V L "relocateRecordLen" 29 155 "int8[6]"
V L "relocateOriginalAddress" 29 156 "int8[6]" "int flashReadBuffer[getenv("FLASH_ERASE_SIZE")];  // buffer for the relocated first mem block"
V L "flashReadBuffer" 29 159 "int8[16]" "buffer for the relocated first mem block"
C L "downloadBootloader" 29 5 1 "FUNCTION"
C L "downloadBootloader" 29 5 1 "FUNCTION"
C L "downloadBootloader" 29 5 1 "FUNCTION"
C L "downloadBootloader" 29 5 1 "FUNCTION"
C L "downloadBootloader" 29 5 1 "FUNCTION"
C L "downloadBootloader" 29 5 1 "FUNCTION"
C L "downloadBootloader" 29 5 1 "FUNCTION"
C L "downloadBootloader" 29 5 2 "FUNCTION"
C L "downloadBootloader" 29 5 7 "FUNCTION"
C L "downloadBootloader" 29 5 1 "FUNCTION"
C L "downloadBootloader" 29 5 1 "FUNCTION"
C L "downloadBootloader" 29 5 1 "FUNCTION"
C L "downloadBootloader" 29 5 1 "FUNCTION"
C L "downloadBootloader" 29 5 2 "FUNCTION"
D G "SUCCESS" 30 7 "1"
D G "NOT_SUCCESS" 30 8 "0"
F G "resetI2C" 30 11 "void()" "clear the error flag registers and re-enable the i2c bus"
C L "resetI2C" 30 2 1 "FUNCTION"
C L "resetI2C" 30 2 1 "FUNCTION"
C L "resetI2C" 30 2 1 "FUNCTION"
C L "resetI2C" 30 2 1 "FUNCTION"
C L "i2cWrite" 30 2 16 "FUNCTION"
V L "slaveAddress" 30 62 "int8"
V L "registerAddress" 30 62 "int8"
V L "registerValue" 30 62 "int8"
F G "i2cWrite" 30 62 "int8(int8 slaveAddress,int8 registerAddress,int8 registerValue)" "/disable_interrupts(GLOBAL);"
C L "i2cWrite" 30 2 2 "FUNCTION"
C L "i2cWrite" 30 2 2 "FUNCTION"
C L "i2cWrite" 30 2 1 "FUNCTION"
C L "i2cWrite" 30 2 1 "FUNCTION"
C L "i2cWrite" 30 2 1 "FUNCTION"
C L "i2cRead" 30 2 6 "FUNCTION"
V L "slaveAddress" 30 104 "int8"
V L "registerAddress" 30 104 "int8"
V L "registerValue" 30 104 "*int8"
F G "i2cRead" 30 104 "int8(int8 slaveAddress,int8 registerAddress,*int8 registerValue)" "/disable_interrupts(GLOBAL);"
C L "i2cRead" 30 2 2 "FUNCTION"
C L "i2cRead" 30 2 2 "FUNCTION"
C L "i2cRead" 30 2 1 "FUNCTION"
C L "i2cRead" 30 2 2 "FUNCTION"
C L "i2cRead" 30 2 6 "FUNCTION"
C L "i2cRead" 30 2 1 "FUNCTION"
D G "DS1307_ADDRESS" 31 1 "0xD0" "DS1307 I2C Address (Not changable)"
V L "binary_value" 31 4 "int8"
F G "bin2bcd" 31 4 "int8(int8 binary_value,int8 registerAddress,*int8 registerValue)"
V L "temp" 31 6 "int8"
V L "retval" 31 7 "int8"
C L "bin2bcd" 31 14 2 "FUNCTION"
C L "bin2bcd" 31 14 1 "FUNCTION"
C L "bcd2bin" 31 14 1 "FUNCTION"
V L "bcd_value" 31 33 "int8"
F G "bcd2bin" 31 33 "int8(int8 bcd_value)"
V L "temp" 31 35 "int8"
C L "bcd2bin" 31 14 1 "FUNCTION"
C L "bcd2bin" 31 14 1 "FUNCTION"
C L "bcd2bin" 31 14 1 "FUNCTION"
C L "rtcInit" 31 14 5 "FUNCTION"
F G "rtcInit" 31 57 "void()"
V L "temp" 31 59 "int8" "Clear the CH bit"
C L "rtcInit" 31 14 1 "FUNCTION"
C L "rtcInit" 31 14 1 "FUNCTION"
C L "rtcInit" 31 14 1 "FUNCTION"
C L "rtcInit" 31 14 2 "FUNCTION"
C L "rtcInit" 31 14 1 "FUNCTION"
C L "rtcInit" 31 14 3 "FUNCTION"
C L "rtcGetItem" 31 14 9 "FUNCTION"
V L "itemNumber" 31 102 "int8"
F G "rtcGetItem" 31 102 "int8(int8 itemNumber)"
V L "temp" 31 104 "int8"
C L "rtcGetItem" 31 14 1 "FUNCTION"
V L "itemNumber" 31 113 "int8"
V L "itemValue" 31 113 "int8"
F G "rtcSetItem" 31 113 "void(int8 itemNumber,int8 itemValue,int8 ch3,int8 ch4)"
C L "Char2Segments" 31 14 2 "FUNCTION"
C L "Char2Segments" 31 118 3 "*sec"
C L "Char2Segments" 31 118 3 "*min"
C L "Char2Segments" 31 118 5 "*hr"
C L "Char2Segments" 31 118 3 "*day"
C L "Char2Segments" 31 118 3 "*mo"
C L "Char2Segments" 31 118 22 "*year"
C L "Char2Segments" 31 118 1 "*dow"
C L "Char2Segments" 31 118 1 "*day"
C L "Char2Segments" 31 118 1 "*mth"
C L "Char2Segments" 31 118 8 "*year"
C L "Char2Segments" 31 118 1 "*sec"
C L "Char2Segments" 31 118 1 "*min"
C L "Char2Segments" 31 118 23 "*hr"
C L "Char2Segments" 31 118 9 "*registerValue"
V L "inChar" 32 2 "int8"
F G "Char2Segments" 32 2 "int8(int8 inChar,int8 itemValue,int8 ch3,int8 ch4)"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
C L "Char2Segments" 32 5 1 "FUNCTION"
F G "cls_internal7Seg" 32 143 "void(int8 inChar,int8 itemValue,int8 ch3,int8 ch4)"
F G "turnOffAllSegments" 32 151 "void(int8 inChar,int8 itemValue,int8 ch3,int8 ch4)"
C L "showOnBuiltIn7Segment" 32 5 1 "FUNCTION"
V L "ch1" 32 163 "int8"
V L "ch2" 32 163 "int8"
V L "ch3" 32 163 "int8"
V L "ch4" 32 163 "int8"
F G "showOnBuiltIn7Segment" 32 163 "void(int8 ch1,int8 ch2,int8 ch3,int8 ch4)"
C L "showNextDigit" 32 5 3 "FUNCTION"
F G "showNextDigit" 32 174 "void(int8 ch1,int8 ch2,int8 ch3,int8 ch4)"
V L "charToShow" 32 175 "int8"
V L "displayBits" 32 176 "int8"
V L "i" 32 177 "int8"
C L "showNextDigit" 32 5 1 "FUNCTION"
C L "showNextDigit" 32 5 1 "FUNCTION"
C L "showNextDigit" 32 5 1 "FUNCTION"
C L "showNextDigit" 32 5 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "output_f" 1 0
F B "output_g" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "input_f" 0 0
F B "input_g" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "set_tris_f" 1 0
F B "set_tris_g" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "get_tris_f" 0 0
F B "get_tris_g" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "input_change_f" 0 0
F B "input_change_g" 0 0
F B "port_b_pullups" 1 0
F B "port_d_pullups" 1 0
F B "port_e_pullups" 1 0
F B "port_j_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 2
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_ccp5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 0
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "i2c_poll" 0 1
F B "i2c_speed" 1 2
F B "i2c_init" 1 2
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
